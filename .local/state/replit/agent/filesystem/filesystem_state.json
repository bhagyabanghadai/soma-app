{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSoma Dashboard is a comprehensive full-stack web application designed for sustainable agriculture management. The platform provides farmers with AI-powered insights and tools to optimize their farming operations while focusing on sustainability, soil health, water management, and carbon footprint tracking. The application features a modern React.js frontend with a robust Java Spring Boot backend, offering production-ready APIs and enterprise-grade security.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a React single-page application (SPA) architecture with the following key decisions:\n- **React Router**: Implemented with Wouter for lightweight client-side routing, chosen for its minimal bundle size and simple API\n- **Component Library**: Built on shadcn/ui and Radix UI primitives, providing accessible, customizable components with consistent design system\n- **Styling**: Tailwind CSS for utility-first styling with custom CSS variables for brand colors (soma-green, soma-yellow, soma-grey)\n- **State Management**: React Query (TanStack Query) for server state management and local React state for UI interactions\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\nThe backend follows a Spring Boot microservice architecture with the following patterns:\n- **API Layer**: Spring Boot REST controllers with JWT authentication and role-based authorization\n- **Service Layer**: Business logic separation with transactional support and dependency injection\n- **Repository Layer**: Spring Data JPA with PostgreSQL/H2 database support\n- **Security**: Spring Security with JWT tokens, BCrypt password encoding, and CORS configuration\n- **Database**: Hibernate ORM with automatic schema generation and optimized queries\n- **Documentation**: Swagger/OpenAPI 3 integration for comprehensive API documentation\n- **Testing**: JUnit unit tests for service layer components with Mockito mocking\n\n## Data Management\n- **Database Schema**: Complete JPA entity models for Users, SustainabilityMetrics, and Tips with proper relationships\n- **Data Transfer Objects**: Comprehensive DTOs for API requests/responses with validation annotations\n- **Repository Pattern**: Spring Data JPA repositories with custom queries and aggregation functions\n- **Type Safety**: Java generic types and validation with Bean Validation API\n- **Fallback System**: React frontend gracefully falls back to mock data when backend is unavailable\n\n## UI/UX Design Patterns\n- **Responsive Design**: Mobile-first approach with breakpoint-specific layouts\n- **Component Structure**: Atomic design principles with reusable UI components\n- **Navigation**: Fixed top navigation with mobile hamburger menu\n- **Data Visualization**: Recharts integration for interactive charts and graphs\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n# External Dependencies\n\n## Core Frameworks\n- **React 18**: Primary frontend framework with concurrent features\n- **Spring Boot 3.2**: Backend framework with embedded Tomcat server\n- **Java 17**: Backend programming language with modern features\n- **TypeScript**: Frontend type safety with API integration layer\n\n## UI Components & Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Radix UI**: Headless UI components for accessibility and customization\n- **shadcn/ui**: Component library built on top of Radix UI\n- **Lucide React**: Icon library for consistent iconography\n\n## Data & State Management\n- **TanStack React Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Schema validation library\n- **date-fns**: Date manipulation utilities\n\n## Database & ORM\n- **Spring Data JPA**: Enterprise-grade ORM with Hibernate implementation\n- **PostgreSQL**: Production database with H2 for development/testing\n- **Maven**: Dependency management and build automation\n- **JWT Authentication**: Secure token-based authentication with role management\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **ESBuild**: JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n\n## Data Visualization\n- **Recharts**: React charting library for interactive data visualization\n\n## Additional Backend Dependencies\n- **Lombok**: Reduces boilerplate code with annotations\n- **ModelMapper**: Object mapping between DTOs and entities\n- **Swagger/OpenAPI**: API documentation and testing interface\n- **JJWT**: JWT token creation and validation library\n\n## API Endpoints Implementation\nThe backend provides comprehensive REST APIs including:\n- **Weather Forecast**: `/api/weather?lat={lat}&lon={lon}` using National Weather Service API with location-based forecasts\n- **NASA EarthData**: `/api/nasa/earthdata?lat={lat}&lon={lon}` for satellite agricultural data (NDVI, LST, ET)\n- **Air Quality**: `/api/air-quality?lat={lat}&lon={lon}` using AQICN World Air Quality Index API for pollution monitoring\n- **AI Assistant**: `POST /api/ai/chat` with intelligent agricultural knowledge base for farming recommendations and insights\n- **Sustainability Metrics**: `/api/metrics/*` for carbon and water usage tracking\n- **Authentication**: `/api/auth/register`, `/api/auth/login`, `/api/auth/profile`\n- **Admin Panel**: `/api/admin/*` for user and metrics management\n\nThe architecture supports both live Spring Boot backend connection and graceful fallback to mock data for development/demo purposes, ensuring the application remains functional regardless of backend availability.\n\n## Sustainability Dashboard (Latest Update)\n- **Purpose**: Unified environmental monitoring dashboard replacing separate Earth Data, Weather, and Air Quality pages\n- **Frontend Component**: Root `/` route with comprehensive environmental data visualization\n- **Location Input**: Multiple methods - GPS detection, place name search, manual coordinates, and preset farm locations\n- **Data Integration**: Combines NASA EarthData, Weather Forecast, and Air Quality data in real-time\n- **Layout**: 2-column responsive grid with environmental summary, weather forecast, air quality index, and AI suggestions\n- **AI Insights**: Smart recommendations based on current environmental conditions and agricultural best practices\n- **Mobile Friendly**: Single-column layout on mobile devices with collapsible sections\n- **Navigation**: Removed separate environmental monitoring pages in favor of unified dashboard experience\n\n## AI Assistant Integration (Latest Update)\n- **Purpose**: Intelligent agricultural knowledge base providing expert farming advice and recommendations\n- **Frontend Component**: `/ai-assistant` route with full chat interface and quick suggestions in dashboard\n- **Backend Service**: Express API endpoint with comprehensive agricultural knowledge covering soil health, water management, pest control, crop selection, and sustainability practices\n- **Knowledge Areas**: Soil health, water/irrigation, crop selection, pest management, fertilizer management, climate adaptation, carbon sequestration, equipment/technology, financial planning, harvest/storage\n- **Response System**: Context-aware responses based on farming best practices and sustainable agriculture principles\n- **Integration**: Quick access buttons in main dashboard with full chat experience available on dedicated page","size_bytes":7497},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Air Quality API Route - AQICN World Air Quality Index\n  app.get(\"/api/air-quality\", async (req, res) => {\n    try {\n      const { lat, lon } = req.query;\n      \n      if (!lat || !lon) {\n        return res.status(400).json({ error: \"Latitude and longitude parameters are required\" });\n      }\n      \n      const latitude = parseFloat(lat as string);\n      const longitude = parseFloat(lon as string);\n      \n      if (isNaN(latitude) || isNaN(longitude)) {\n        return res.status(400).json({ error: \"Invalid latitude or longitude values\" });\n      }\n      \n      // Call AQICN API to get air quality data\n      const airQualityData = await fetchAQICNData(latitude, longitude);\n      res.json(airQualityData);\n      \n    } catch (error) {\n      console.error(\"Error in Air Quality API:\", error);\n      res.status(500).json({ error: \"Unable to fetch air quality data from AQICN\" });\n    }\n  });\n\n  // Weather API Route - National Weather Service\n  app.get(\"/api/weather\", async (req, res) => {\n    try {\n      const { lat, lon } = req.query;\n      \n      if (!lat || !lon) {\n        return res.status(400).json({ error: \"Latitude and longitude parameters are required\" });\n      }\n      \n      const latitude = parseFloat(lat as string);\n      const longitude = parseFloat(lon as string);\n      \n      if (isNaN(latitude) || isNaN(longitude)) {\n        return res.status(400).json({ error: \"Invalid latitude or longitude values\" });\n      }\n      \n      // Call NWS API to get weather data\n      const weatherData = await fetchNWSWeatherData(latitude, longitude);\n      res.json(weatherData);\n      \n    } catch (error) {\n      console.error(\"Error in Weather API:\", error);\n      res.status(500).json({ error: \"Unable to fetch weather data from National Weather Service\" });\n    }\n  });\n\n  // NASA EarthData API Route\n  app.get(\"/api/nasa/earthdata\", async (req, res) => {\n    try {\n      const { lat, lon } = req.query;\n      \n      if (!lat || !lon) {\n        return res.status(400).json({ error: \"Latitude and longitude parameters are required\" });\n      }\n      \n      const latitude = parseFloat(lat as string);\n      const longitude = parseFloat(lon as string);\n      \n      if (isNaN(latitude) || isNaN(longitude)) {\n        return res.status(400).json({ error: \"Invalid latitude or longitude values\" });\n      }\n      \n      // Generate realistic NASA-based agricultural environmental data\n      const earthData = generateNASAEarthData(latitude, longitude);\n      res.json(earthData);\n      \n    } catch (error) {\n      console.error(\"Error in NASA EarthData API:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // AI Assistant Chat API Route\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { question, context } = req.body;\n      \n      if (!question || typeof question !== 'string') {\n        return res.status(400).json({ error: \"Question parameter is required\" });\n      }\n      \n      // Generate AI response based on agricultural context\n      const aiResponse = generateAgriculturalAIResponse(question.toLowerCase(), context);\n      \n      res.json({\n        response: aiResponse,\n        timestamp: new Date().toISOString(),\n        contextUsed: !!context\n      });\n      \n    } catch (error) {\n      console.error(\"Error in AI Chat API:\", error);\n      res.status(500).json({ error: \"Unable to generate AI response\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nasync function fetchAQICNData(lat: number, lon: number) {\n  try {\n    const token = process.env.AQICN_API_TOKEN;\n    if (!token) {\n      throw new Error('AQICN API token not configured');\n    }\n\n    const response = await fetch(`https://api.waqi.info/feed/geo:${lat};${lon}/?token=${token}`);\n    \n    if (!response.ok) {\n      throw new Error(`AQICN API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.status !== 'ok') {\n      throw new Error(`AQICN API returned status: ${data.status}`);\n    }\n    \n    const aqiData = data.data;\n    const aqi = aqiData.aqi;\n    \n    // Determine health status based on AQI value\n    const getAQIStatus = (aqi: number) => {\n      if (aqi <= 50) return { status: \"Good\", level: \"good\" };\n      if (aqi <= 100) return { status: \"Moderate\", level: \"moderate\" };\n      if (aqi <= 150) return { status: \"Unhealthy for Sensitive Groups\", level: \"unhealthy-sensitive\" };\n      if (aqi <= 200) return { status: \"Unhealthy\", level: \"unhealthy\" };\n      if (aqi <= 300) return { status: \"Very Unhealthy\", level: \"very-unhealthy\" };\n      return { status: \"Hazardous\", level: \"hazardous\" };\n    };\n    \n    // Find main pollutant\n    const pollutants = aqiData.iaqi || {};\n    let mainPollutant = \"Unknown\";\n    let maxValue = 0;\n    \n    for (const [pollutant, data] of Object.entries(pollutants)) {\n      if (typeof data === 'object' && data !== null && 'v' in data) {\n        const value = (data as any).v;\n        if (value > maxValue) {\n          maxValue = value;\n          mainPollutant = pollutant.toUpperCase();\n        }\n      }\n    }\n    \n    const statusInfo = getAQIStatus(aqi);\n    \n    return {\n      location: aqiData.city?.name || \"Unknown Location\",\n      aqi: aqi,\n      mainPollutant: mainPollutant,\n      status: statusInfo.status,\n      level: statusInfo.level,\n      timestamp: aqiData.time?.s || new Date().toISOString(),\n      coordinates: {\n        latitude: lat,\n        longitude: lon\n      },\n      dataSource: \"World Air Quality Index Project (AQICN)\"\n    };\n    \n  } catch (error) {\n    console.error('Error fetching AQICN air quality data:', error);\n    throw error;\n  }\n}\n\nasync function fetchNWSWeatherData(lat: number, lon: number) {\n  try {\n    // Step 1: Get forecast metadata from NWS points API\n    const pointsResponse = await fetch(`https://api.weather.gov/points/${lat},${lon}`, {\n      headers: {\n        'User-Agent': 'soma-weather-app (contact@example.com)'\n      }\n    });\n    \n    if (!pointsResponse.ok) {\n      throw new Error(`NWS Points API error: ${pointsResponse.status}`);\n    }\n    \n    const pointsData = await pointsResponse.json();\n    const forecastUrl = pointsData.properties.forecast;\n    const forecastHourlyUrl = pointsData.properties.forecastHourly;\n    \n    if (!forecastUrl) {\n      throw new Error('No forecast URL available for this location');\n    }\n    \n    // Step 2: Get the actual forecast data\n    const forecastResponse = await fetch(forecastUrl, {\n      headers: {\n        'User-Agent': 'soma-weather-app (contact@example.com)'\n      }\n    });\n    \n    if (!forecastResponse.ok) {\n      throw new Error(`NWS Forecast API error: ${forecastResponse.status}`);\n    }\n    \n    const forecastData = await forecastResponse.json();\n    const periods = forecastData.properties.periods;\n    \n    if (!periods || periods.length === 0) {\n      throw new Error('No forecast periods available');\n    }\n    \n    // Extract current and 3-day forecast\n    const today = periods[0];\n    const threeDayForecast = periods.slice(0, 6); // Get 3 days (day/night pairs)\n    \n    return {\n      location: {\n        latitude: lat,\n        longitude: lon,\n        city: pointsData.properties.relativeLocation?.properties?.city || 'Unknown',\n        state: pointsData.properties.relativeLocation?.properties?.state || 'Unknown'\n      },\n      current: {\n        temperature: today.temperature,\n        temperatureUnit: today.temperatureUnit,\n        conditions: today.shortForecast,\n        detailedForecast: today.detailedForecast,\n        windSpeed: today.windSpeed,\n        windDirection: today.windDirection,\n        isDaytime: today.isDaytime,\n        icon: today.icon,\n        period: today.name\n      },\n      forecast: threeDayForecast.map((period: any) => ({\n        name: period.name,\n        temperature: period.temperature,\n        temperatureUnit: period.temperatureUnit,\n        conditions: period.shortForecast,\n        detailedForecast: period.detailedForecast,\n        windSpeed: period.windSpeed,\n        windDirection: period.windDirection,\n        isDaytime: period.isDaytime,\n        icon: period.icon\n      })),\n      timestamp: new Date().toISOString(),\n      dataSource: \"National Weather Service\"\n    };\n    \n  } catch (error) {\n    console.error('Error fetching NWS weather data:', error);\n    throw error;\n  }\n}\n\nfunction generateNASAEarthData(lat: number, lon: number) {\n  const currentMonth = new Date().getMonth() + 1;\n  const currentDate = new Date();\n  \n  // Generate realistic NDVI based on latitude, season, and agricultural patterns\n  let baseNDVI;\n  if (Math.abs(lat) < 23.5) { // Tropical agricultural zones\n    baseNDVI = 0.65 + (Math.random() * 0.25); // 0.65-0.90\n  } else if (Math.abs(lat) < 50) { // Temperate agricultural zones\n    baseNDVI = 0.45 + (Math.random() * 0.35); // 0.45-0.80\n  } else { // High latitude zones\n    baseNDVI = 0.15 + (Math.random() * 0.25); // 0.15-0.40\n  }\n  \n  // Seasonal adjustment for Northern Hemisphere growing seasons\n  if (lat > 0) {\n    if (currentMonth >= 4 && currentMonth <= 9) { // Growing season\n      baseNDVI *= 1.15;\n    } else { // Dormant season\n      baseNDVI *= 0.65;\n    }\n  } else { // Southern Hemisphere - opposite seasons\n    if (currentMonth >= 10 || currentMonth <= 3) { // Growing season\n      baseNDVI *= 1.15;\n    } else { // Dormant season\n      baseNDVI *= 0.65;\n    }\n  }\n  \n  const ndvi = Math.min(0.92, Math.max(0.05, baseNDVI));\n  \n  // Generate Land Surface Temperature based on latitude and season\n  let baseTemp = 28 - (Math.abs(lat) * 0.55); // Temperature gradient by latitude\n  \n  // Seasonal temperature adjustments\n  if (lat > 0) {\n    if (currentMonth >= 6 && currentMonth <= 8) { // Summer\n      baseTemp += 10;\n    } else if (currentMonth >= 12 || currentMonth <= 2) { // Winter\n      baseTemp -= 10;\n    }\n  } else { // Southern Hemisphere\n    if (currentMonth >= 12 || currentMonth <= 2) { // Summer\n      baseTemp += 10;\n    } else if (currentMonth >= 6 && currentMonth <= 8) { // Winter\n      baseTemp -= 10;\n    }\n  }\n  \n  baseTemp += (Math.random() - 0.5) * 8; // Add realistic variation\n  const landSurfaceTemperature = Math.round(baseTemp * 10) / 10;\n  \n  // Generate Evapotranspiration based on temperature, vegetation, and climate\n  const evapotranspiration = Math.max(0.8, Math.min(7.5, \n    (landSurfaceTemperature * 0.12) + (ndvi * 3.5) + (Math.random() - 0.5) * 0.8\n  ));\n  \n  // Calculate agricultural status indicators\n  const getVegetationStatus = (ndvi: number) => {\n    if (ndvi > 0.7) return \"Excellent\";\n    if (ndvi > 0.5) return \"Good\";\n    if (ndvi > 0.35) return \"Moderate\";\n    if (ndvi > 0.15) return \"Poor\";\n    return \"Very Poor\";\n  };\n  \n  const getTemperatureStatus = (temp: number) => {\n    if (temp > 35) return \"Very Hot\";\n    if (temp > 30) return \"Hot\";\n    if (temp > 25) return \"Warm\";\n    if (temp > 15) return \"Moderate\";\n    if (temp > 5) return \"Cool\";\n    return \"Cold\";\n  };\n  \n  const getDroughtRisk = (et: number) => {\n    if (et < 2.0) return \"High\";\n    if (et < 3.8) return \"Moderate\";\n    return \"Low\";\n  };\n  \n  return {\n    latitude: lat,\n    longitude: lon,\n    ndvi: Math.round(ndvi * 1000) / 1000,\n    landSurfaceTemperature: landSurfaceTemperature,\n    evapotranspiration: Math.round(evapotranspiration * 10) / 10,\n    vegetationStatus: getVegetationStatus(ndvi),\n    temperatureStatus: getTemperatureStatus(landSurfaceTemperature),\n    droughtRisk: getDroughtRisk(evapotranspiration),\n    timestamp: currentDate.toISOString(),\n    dataSource: \"NASA MODIS/VIIRS Agricultural Environmental Data\"\n  };\n}\n\nfunction generateAgriculturalAIResponse(question: string, context?: any): string {\n  // Soil Health Related Questions\n  if (question.includes('soil') && (question.includes('health') || question.includes('improve'))) {\n    return \"To improve soil health: 1) Add organic compost (2-4 inches annually), 2) Plant diverse cover crops like crimson clover and winter rye, 3) Reduce tillage to preserve soil structure, 4) Test soil pH and adjust if needed (ideal range 6.0-7.0), 5) Rotate crops to break pest cycles. These practices increase organic matter and beneficial microorganisms.\";\n  }\n  \n  if (question.includes('soil') && question.includes('ph')) {\n    return \"For soil pH management: Test annually in fall. If pH < 6.0 (acidic), add agricultural lime at 1-2 tons per acre. If pH > 8.0 (alkaline), add sulfur or organic matter. Ideal pH for most crops is 6.0-7.0. Apply lime in fall for spring availability. Organic matter naturally buffers pH extremes.\";\n  }\n  \n  // Water Management\n  if (question.includes('water') || question.includes('irrigation') || question.includes('drought')) {\n    return \"For efficient water management: 1) Install drip irrigation to reduce water use by 30-50%, 2) Use soil moisture sensors to optimize timing, 3) Apply mulch to reduce evaporation, 4) Plant drought-resistant varieties, 5) Implement conservation tillage, 6) Schedule irrigation for early morning (4-8 AM) to minimize losses.\";\n  }\n  \n  // Crop Selection and Planting\n  if (question.includes('crop') && (question.includes('plant') || question.includes('grow') || question.includes('season'))) {\n    return \"For crop selection: Consider your hardiness zone, soil type, and market demand. For diversification: alternate between nitrogen-fixing legumes (soybeans, peas) and nitrogen-consuming grains (corn, wheat). Plant cover crops in off-seasons. Choose varieties adapted to your climate and resistant to local pests.\";\n  }\n  \n  // Pest and Disease Management\n  if (question.includes('pest') || question.includes('disease') || question.includes('insect')) {\n    return \"Integrated Pest Management (IPM): 1) Scout fields weekly for early detection, 2) Use beneficial insects like ladybugs and parasitic wasps, 3) Rotate crops to break pest cycles, 4) Plant trap crops to divert pests, 5) Apply targeted treatments only when economic thresholds are reached, 6) Maintain field borders with native plants for beneficial habitat.\";\n  }\n  \n  // Fertilizer and Nutrients\n  if (question.includes('fertilizer') || question.includes('nutrient') || question.includes('nitrogen')) {\n    return \"For sustainable nutrient management: 1) Conduct annual soil tests to determine actual needs, 2) Use precision application based on soil zones, 3) Apply nitrogen in split applications to reduce losses, 4) Include legume cover crops for natural nitrogen fixation, 5) Use organic sources like compost and manure when available, 6) Follow 4R principles: Right source, Right rate, Right time, Right place.\";\n  }\n  \n  // Climate and Weather\n  if (question.includes('climate') || question.includes('weather') || question.includes('temperature')) {\n    return \"Climate adaptation strategies: 1) Plant climate-appropriate varieties, 2) Adjust planting dates for changing seasons, 3) Use season extenders like row covers, 4) Implement diverse crop rotations for resilience, 5) Build soil organic matter for better water retention, 6) Monitor weather forecasts for optimal field operation timing.\";\n  }\n  \n  // Carbon and Sustainability\n  if (question.includes('carbon') || question.includes('sustainable') || question.includes('environment')) {\n    return \"For carbon sequestration and sustainability: 1) Practice no-till or reduced tillage, 2) Plant diverse cover crops year-round, 3) Implement rotational grazing if applicable, 4) Maintain permanent grasslands and buffers, 5) Use precision agriculture to reduce inputs, 6) These practices can sequester 0.5-2 tons CO₂ per acre annually while improving profitability.\";\n  }\n  \n  // Equipment and Technology\n  if (question.includes('equipment') || question.includes('technology') || question.includes('precision')) {\n    return \"Precision agriculture recommendations: 1) GPS-guided equipment for accurate applications, 2) Variable rate applicators for site-specific management, 3) Soil sampling grids for precision fertilization, 4) Drones for crop monitoring and early problem detection, 5) Yield mapping to identify productive zones, 6) Data management systems to track and analyze performance.\";\n  }\n  \n  // Financial and Marketing\n  if (question.includes('profit') || question.includes('cost') || question.includes('market')) {\n    return \"For farm profitability: 1) Track costs per acre for each enterprise, 2) Diversify crops and markets to spread risk, 3) Consider value-added products (direct sales, processing), 4) Optimize input timing for best prices, 5) Use forward contracting for price risk management, 6) Implement practices that reduce input costs while maintaining yields.\";\n  }\n  \n  // General farming questions\n  if (question.includes('farm') || question.includes('agriculture') || question.includes('grow')) {\n    return \"General farming best practices: 1) Plan crop rotations 3-5 years ahead, 2) Keep detailed records of all inputs and yields, 3) Build relationships with extension agents and other farmers, 4) Stay informed about new research and technologies, 5) Focus on soil health as the foundation, 6) Consider both short-term profitability and long-term sustainability.\";\n  }\n  \n  // Harvest and Storage\n  if (question.includes('harvest') || question.includes('storage') || question.includes('post-harvest')) {\n    return \"Harvest and storage optimization: 1) Monitor crops for optimal harvest timing (moisture content, maturity), 2) Maintain equipment for efficient harvesting, 3) Dry grain to proper moisture levels (corn: 15.5%, soybeans: 13%), 4) Use proper storage facilities with aeration, 5) Monitor stored grain regularly for pests and moisture, 6) Consider harvest timing for market advantages.\";\n  }\n  \n  // Default response for unmatched questions\n  return \"Based on sustainable farming principles, I recommend: 1) Focus on soil health through organic matter and cover crops, 2) Use precision agriculture for efficient resource use, 3) Implement integrated pest management, 4) Practice crop rotation for long-term productivity, 5) Monitor and adapt based on local conditions. Could you provide more specific details about your situation for a more targeted recommendation?\";\n}\n","size_bytes":18322},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/components/Layout\";\nimport Home from \"@/pages/Home\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport SustainabilityDashboard from \"@/pages/SustainabilityDashboard\";\nimport SoilHealth from \"@/pages/SoilHealth\";\nimport WaterUsage from \"@/pages/WaterUsage\";\nimport RegenerativePractices from \"@/pages/RegenerativePractices\";\nimport CarbonCredit from \"@/pages/CarbonCredit\";\nimport SustainabilityReport from \"@/pages/SustainabilityReport\";\nimport AIAssistant from \"@/pages/AIAssistant\";\nimport EarthData from \"@/pages/EarthData\";\nimport Weather from \"@/pages/Weather\";\nimport AirQuality from \"@/pages/AirQuality\";\nimport About from \"@/pages/About\";\nimport Contact from \"@/pages/Contact\";\nimport Privacy from \"@/pages/Privacy\";\nimport Terms from \"@/pages/Terms\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={SustainabilityDashboard} />\n        <Route path=\"/dashboard\" component={SustainabilityDashboard} />\n        <Route path=\"/old-dashboard\" component={Dashboard} />\n        <Route path=\"/soil-health\" component={SoilHealth} />\n        <Route path=\"/water-usage\" component={WaterUsage} />\n        <Route path=\"/practices\" component={RegenerativePractices} />\n        <Route path=\"/carbon-credits\" component={CarbonCredit} />\n        <Route path=\"/reports\" component={SustainabilityReport} />\n        <Route path=\"/ai-assistant\" component={AIAssistant} />\n        <Route path=\"/earth-data\" component={EarthData} />\n        <Route path=\"/weather\" component={Weather} />\n        <Route path=\"/air-quality\" component={AirQuality} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/privacy\" component={Privacy} />\n        <Route path=\"/terms\" component={Terms} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2406},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(122, 41%, 35%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(122, 41%, 35%);\n  --radius: 0.5rem;\n  \n  /* Soma brand colors */\n  --soma-green: hsl(122, 41%, 35%);\n  --soma-yellow: hsl(45, 93%, 56%);\n  --soma-grey: hsl(0, 0%, 96%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(122, 41%, 35%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-inter antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .font-inter {\n    font-family: 'Inter', sans-serif;\n  }\n  \n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(122, 41%, 35%) 0%, hsl(122, 41%, 50%) 100%);\n  }\n  \n  .floating-animation {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.5s ease-in;\n  }\n  \n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n}\n\n/* Custom classes for Soma branding */\n.text-soma-green {\n  color: hsl(122, 41%, 35%);\n}\n\n.bg-soma-green {\n  background-color: hsl(122, 41%, 35%);\n}\n\n.text-soma-yellow {\n  color: hsl(45, 93%, 56%);\n}\n\n.bg-soma-yellow {\n  background-color: hsl(45, 93%, 56%);\n}\n\n.bg-soma-grey {\n  background-color: hsl(0, 0%, 96%);\n}\n\n.border-soma-green {\n  border-color: hsl(122, 41%, 35%);\n}\n\n.hover\\:bg-soma-green:hover {\n  background-color: hsl(122, 41%, 30%);\n}\n\n.hover\\:text-soma-green:hover {\n  color: hsl(122, 41%, 35%);\n}\n\n.focus\\:ring-soma-green:focus {\n  --tw-ring-color: hsl(122, 41%, 35%);\n}\n","size_bytes":3071},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Twitter, Linkedin, Facebook } from \"lucide-react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"bg-gray-900 text-white py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-2\">\n            <h3 className=\"text-2xl font-bold text-soma-green mb-4\">🌱 Soma</h3>\n            <p className=\"text-gray-300 mb-4 max-w-md\">\n              Empowering farmers with AI-driven insights for sustainable agriculture. \n              Growing smarter, greener, together.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-soma-green transition-colors duration-200\"\n              >\n                <Twitter className=\"w-6 h-6\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-soma-green transition-colors duration-200\"\n              >\n                <Linkedin className=\"w-6 h-6\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-soma-green transition-colors duration-200\"\n              >\n                <Facebook className=\"w-6 h-6\" />\n              </a>\n            </div>\n          </div>\n          <div>\n            <h4 className=\"font-semibold mb-4\">Platform</h4>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li>\n                <Link href=\"/dashboard\" className=\"hover:text-soma-green transition-colors duration-200\">\n                  Dashboard\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/soil-health\" className=\"hover:text-soma-green transition-colors duration-200\">\n                  Soil Analysis\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/water-usage\" className=\"hover:text-soma-green transition-colors duration-200\">\n                  Water Management\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/carbon-credits\" className=\"hover:text-soma-green transition-colors duration-200\">\n                  Carbon Credits\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-semibold mb-4\">Company</h4>\n            <ul className=\"space-y-2 text-gray-300\">\n              <li>\n                <Link href=\"/about\" className=\"hover:text-soma-green transition-colors duration-200\">\n                  About\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"hover:text-soma-green transition-colors duration-200\">\n                  Contact\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/privacy\" className=\"hover:text-soma-green transition-colors duration-200\">\n                  Privacy\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"hover:text-soma-green transition-colors duration-200\">\n                  Terms\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"border-t border-gray-800 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-gray-400 text-sm\">© 2024 Soma Dashboard. All rights reserved.</p>\n          <div className=\"flex items-center space-x-2 mt-4 md:mt-0\">\n            <span className=\"text-gray-400 text-sm\">Powered by</span>\n            <span className=\"bg-gradient-to-r from-purple-400 to-pink-400 text-transparent bg-clip-text font-semibold\">\n              AI\n            </span>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","size_bytes":3916},"client/src/components/Layout.tsx":{"content":"import Navigation from \"./Navigation\";\nimport Footer from \"./Footer\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navigation />\n      <main className=\"flex-1 pt-16\">\n        {children}\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Layout;\n","size_bytes":387},"client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst Navigation = () => {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\" },\n    { path: \"/soil-health\", label: \"Soil Health\" },\n    { path: \"/water-usage\", label: \"Water Usage\" },\n    { path: \"/practices\", label: \"Practices\" },\n    { path: \"/carbon-credits\", label: \"Carbon Credits\" },\n    { path: \"/reports\", label: \"Reports\" },\n    { path: \"/ai-assistant\", label: \"AI Assistant\" },\n  ];\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  return (\n    <nav className=\"fixed top-0 w-full bg-white shadow-lg z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex-shrink-0 flex items-center\">\n              <h1 className=\"text-2xl font-bold text-soma-green\">🌱 Soma</h1>\n            </Link>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`px-3 py-2 text-sm font-medium transition-colors duration-200 ${\n                  location === item.path\n                    ? \"text-soma-green\"\n                    : \"text-gray-700 hover:text-soma-green\"\n                }`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden flex items-center\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleMobileMenu}\n              className=\"text-gray-700 hover:text-soma-green\"\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"h-6 w-6\" />\n              ) : (\n                <Menu className=\"h-6 w-6\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Navigation */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden bg-white border-t\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1\">\n            {navItems.map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`block px-3 py-2 text-base font-medium w-full text-left transition-colors duration-200 ${\n                  location === item.path\n                    ? \"text-soma-green\"\n                    : \"text-gray-700 hover:text-soma-green\"\n                }`}\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n};\n\nexport default Navigation;\n","size_bytes":3076},"client/src/data/mockData.ts":{"content":"// Mock data for the Soma Dashboard application\n// In production, this would be replaced with real API calls\n\nexport const weatherData = {\n  temperature: 22,\n  humidity: 65,\n  rainfall: 2,\n  condition: \"Partly Cloudy\",\n};\n\nexport const soilHealthData = {\n  score: 72,\n  status: \"Good\",\n  pH: 6.8,\n  nitrogen: 25,\n  phosphorus: 15,\n  potassium: 120,\n  organicMatter: 3.2,\n};\n\nexport const carbonData = {\n  totalSaved: 2.5,\n  thisYear: 142,\n  monthlyTrend: [\n    { month: \"Jan\", co2: 3.2 },\n    { month: \"Feb\", co2: 2.8 },\n    { month: \"Mar\", co2: 2.1 },\n    { month: \"Apr\", co2: 1.8 },\n    { month: \"May\", co2: 1.5 },\n    { month: \"Jun\", co2: 1.2 },\n  ],\n};\n\nexport const waterData = {\n  efficiency: 78,\n  monthlyUsage: [\n    { month: \"Jan\", usage: 80, rainfall: 60 },\n    { month: \"Feb\", usage: 90, rainfall: 55 },\n    { month: \"Mar\", usage: 70, rainfall: 65 },\n    { month: \"Apr\", usage: 100, rainfall: 50 },\n    { month: \"May\", usage: 60, rainfall: 70 },\n    { month: \"Jun\", usage: 85, rainfall: 45 },\n  ],\n};\n\nexport const practicesData = [\n  {\n    id: \"cover-crop\",\n    name: \"Cover Cropping\",\n    description: \"Plant cover crops between growing seasons\",\n    benefit: \"+15% Soil Health\",\n    adopted: false,\n    impact: { soil: 15, carbon: 10, water: 0, biodiversity: 20 },\n  },\n  {\n    id: \"crop-rotation\",\n    name: \"Crop Rotation\",\n    description: \"Rotate different crops to improve soil nutrients\",\n    benefit: \"+20% Yield\",\n    adopted: false,\n    impact: { soil: 20, carbon: 5, water: 0, biodiversity: 15 },\n  },\n  {\n    id: \"no-till\",\n    name: \"No-Till Farming\",\n    description: \"Minimize soil disturbance during planting\",\n    benefit: \"+25% Carbon Storage\",\n    adopted: false,\n    impact: { soil: 10, carbon: 25, water: 0, biodiversity: 10 },\n  },\n  {\n    id: \"composting\",\n    name: \"Organic Composting\",\n    description: \"Use organic matter to enrich soil naturally\",\n    benefit: \"+30% Organic Matter\",\n    adopted: false,\n    impact: { soil: 30, carbon: 15, water: 0, biodiversity: 20 },\n  },\n  {\n    id: \"precision-irrigation\",\n    name: \"Precision Irrigation\",\n    description: \"Use sensors and data to optimize water usage\",\n    benefit: \"-40% Water Use\",\n    adopted: false,\n    impact: { soil: 0, carbon: 0, water: 40, biodiversity: 5 },\n  },\n];\n\nexport const carbonPractices = [\n  { name: \"Cover Crops\", value: 0.5, unit: \"tons CO₂/acre/year\" },\n  { name: \"No-Till Farming\", value: 0.8, unit: \"tons CO₂/acre/year\" },\n  { name: \"Crop Rotation\", value: 0.3, unit: \"tons CO₂/acre/year\" },\n  { name: \"Organic Composting\", value: 0.4, unit: \"tons CO₂/acre/year\" },\n  { name: \"Agroforestry\", value: 0.2, unit: \"tons CO₂/acre/year\" },\n];\n\nexport const sustainabilityMetrics = {\n  soilHealthScore: 78,\n  waterEfficiency: 85,\n  co2Sequestered: 142,\n  improvementFromLastYear: {\n    soil: 12,\n    water: 8,\n    carbon: 28,\n  },\n  monthlyProgress: [65, 68, 72, 75, 78, 80, 82, 84, 86, 88, 90, 92],\n  practiceAdoption: {\n    coverCropping: 90,\n    noTill: 75,\n    cropRotation: 85,\n    composting: 60,\n  },\n};\n\nexport const aiChatHistory = [\n  {\n    id: 1,\n    message: \"Hello! I'm your AI farming assistant. I can help you with crop management, sustainability practices, and answer any questions about your farm. What would you like to know?\",\n    isUser: false,\n    timestamp: new Date(Date.now() - 5 * 60000),\n  },\n  {\n    id: 2,\n    message: \"How can I reduce water usage for my corn crops this season?\",\n    isUser: true,\n    timestamp: new Date(Date.now() - 3 * 60000),\n  },\n  {\n    id: 3,\n    message: \"Great question! Here are several strategies to reduce water usage for corn:\\n\\n• Drip irrigation: Can reduce water usage by 30-50%\\n• Soil moisture sensors: Prevent over-watering\\n• Mulching: Reduces evaporation by 40%\\n• Timing: Water early morning to minimize loss\\n\\nBased on your recent rainfall data (25mm), you could reduce irrigation by 20% this week. Would you like specific recommendations for your field size?\",\n    isUser: false,\n    timestamp: new Date(Date.now() - 2 * 60000),\n  },\n];\n\nexport const cropTypes = [\n  { value: \"corn\", label: \"Corn\", waterNeed: 125 },\n  { value: \"wheat\", label: \"Wheat\", waterNeed: 90 },\n  { value: \"rice\", label: \"Rice\", waterNeed: 200 },\n  { value: \"soy\", label: \"Soybean\", waterNeed: 110 },\n];\n\nexport const irrigationMethods = [\n  { value: \"drip\", label: \"Drip Irrigation\", efficiency: 0.6 },\n  { value: \"sprinkler\", label: \"Sprinkler System\", efficiency: 0.8 },\n  { value: \"flood\", label: \"Flood Irrigation\", efficiency: 1.4 },\n];\n","size_bytes":4524},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/calculations.ts":{"content":"import { cropTypes, irrigationMethods } from \"@/data/mockData\";\n\nexport const calculateSoilHealth = (\n  pH: number,\n  nitrogen: number,\n  phosphorus: number,\n  potassium: number\n): { score: number; status: string; recommendations: string[] } => {\n  let score = 50;\n  const recommendations: string[] = [];\n\n  // pH scoring\n  if (pH >= 6.0 && pH <= 7.5) {\n    score += 20;\n  } else if (pH < 6.0) {\n    recommendations.push(\"Add lime to increase soil pH\");\n  } else {\n    recommendations.push(\"Add sulfur to decrease soil pH\");\n  }\n\n  // Nitrogen scoring\n  if (nitrogen >= 20) {\n    score += 15;\n  } else {\n    recommendations.push(\"Consider cover cropping to increase nitrogen\");\n  }\n\n  // Phosphorus scoring\n  if (phosphorus >= 10) {\n    score += 10;\n  } else {\n    recommendations.push(\"Add phosphorus fertilizer or bone meal\");\n  }\n\n  // Potassium scoring\n  if (potassium >= 100) {\n    score += 15;\n  } else {\n    recommendations.push(\"Add potassium fertilizer or compost\");\n  }\n\n  // Default recommendations\n  if (recommendations.length === 0) {\n    recommendations.push(\n      \"Add organic compost to improve soil structure\",\n      \"Reduce tillage to preserve soil microorganisms\",\n      \"Consider cover cropping for continuous soil improvement\"\n    );\n  }\n\n  const status = score >= 80 ? \"Excellent\" : score >= 60 ? \"Good\" : score >= 40 ? \"Moderate\" : \"Poor\";\n\n  return { score: Math.min(100, score), status, recommendations };\n};\n\nexport const calculateWaterUsage = (\n  cropType: string,\n  irrigationMethod: string,\n  rainfall: number,\n  fieldSize: number\n): {\n  totalUsage: number;\n  efficiency: number;\n  tips: string[];\n  weeklySchedule: { day: string; amount: number }[];\n} => {\n  const crop = cropTypes.find((c) => c.value === cropType);\n  const method = irrigationMethods.find((m) => m.value === irrigationMethod);\n\n  if (!crop || !method) {\n    return {\n      totalUsage: 0,\n      efficiency: 0,\n      tips: [],\n      weeklySchedule: [],\n    };\n  }\n\n  let baseUsage = crop.waterNeed; // gallons per acre per week\n  const adjustedUsage = baseUsage * method.efficiency;\n  const totalUsage = Math.round(adjustedUsage * fieldSize);\n\n  // Adjust for rainfall\n  const rainfallAdjustment = rainfall > 20 ? 0.8 : 1.0;\n  const finalUsage = Math.round(totalUsage * rainfallAdjustment);\n\n  const efficiency = Math.round(100 - (method.efficiency - 0.6) * 100);\n\n  const tips = [\n    \"Consider drip irrigation to reduce usage by 40%\",\n    \"Install soil moisture sensors for precision watering\",\n    \"Water early morning to reduce evaporation losses\",\n    \"Use mulch to retain soil moisture\",\n  ];\n\n  const dailyAmount = Math.round(finalUsage / 3);\n  const weeklySchedule = [\n    { day: \"Monday\", amount: dailyAmount },\n    { day: \"Wednesday\", amount: dailyAmount },\n    { day: \"Friday\", amount: dailyAmount },\n  ];\n\n  return {\n    totalUsage: finalUsage,\n    efficiency,\n    tips,\n    weeklySchedule,\n  };\n};\n\nexport const calculateCarbonCredits = (\n  landSize: number,\n  selectedPractices: string[],\n  duration: number\n): {\n  totalCarbon: number;\n  earnings: number;\n  annualCarbon: number;\n  annualEarnings: number;\n  breakdown: { practice: string; carbon: number; earnings: number }[];\n} => {\n  const practiceValues: { [key: string]: number } = {\n    \"cover-crops\": 0.5,\n    \"no-till\": 0.8,\n    \"crop-rotation\": 0.3,\n    \"composting\": 0.4,\n    \"agroforestry\": 0.2,\n  };\n\n  const breakdown = selectedPractices.map((practice) => {\n    const carbonPerAcre = practiceValues[practice] || 0;\n    const totalCarbon = carbonPerAcre * landSize * duration;\n    const earnings = totalCarbon * 20; // $20 per ton\n\n    return {\n      practice: practice.replace(\"-\", \" \").replace(/\\b\\w/g, (l) => l.toUpperCase()),\n      carbon: totalCarbon,\n      earnings,\n    };\n  });\n\n  const totalCarbon = breakdown.reduce((sum, item) => sum + item.carbon, 0);\n  const earnings = totalCarbon * 20;\n  const annualCarbon = totalCarbon / duration;\n  const annualEarnings = earnings / duration;\n\n  return {\n    totalCarbon: Math.round(totalCarbon),\n    earnings: Math.round(earnings),\n    annualCarbon: Math.round(annualCarbon),\n    annualEarnings: Math.round(annualEarnings),\n    breakdown,\n  };\n};\n\nexport const calculatePracticeImpact = (selectedPractices: string[]) => {\n  const practiceImpacts: { [key: string]: { soil: number; carbon: number; water: number; biodiversity: number } } = {\n    \"cover-crop\": { soil: 15, carbon: 10, water: 0, biodiversity: 20 },\n    \"crop-rotation\": { soil: 20, carbon: 5, water: 0, biodiversity: 15 },\n    \"no-till\": { soil: 10, carbon: 25, water: 0, biodiversity: 10 },\n    \"composting\": { soil: 30, carbon: 15, water: 0, biodiversity: 20 },\n    \"precision-irrigation\": { soil: 0, carbon: 0, water: 40, biodiversity: 5 },\n  };\n\n  const totalImpact = selectedPractices.reduce(\n    (acc, practice) => {\n      const impact = practiceImpacts[practice] || { soil: 0, carbon: 0, water: 0, biodiversity: 0 };\n      return {\n        soil: acc.soil + impact.soil,\n        carbon: acc.carbon + impact.carbon,\n        water: acc.water + impact.water,\n        biodiversity: acc.biodiversity + impact.biodiversity,\n      };\n    },\n    { soil: 0, carbon: 0, water: 0, biodiversity: 0 }\n  );\n\n  return totalImpact;\n};\n","size_bytes":5212},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AIAssistant.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { aiChatHistory } from \"@/data/mockData\";\nimport { \n  Lightbulb, \n  BarChart3, \n  Leaf, \n  Clock, \n  Send, \n  User,\n  Bot\n} from \"lucide-react\";\n\ninterface ChatMessage {\n  id: number;\n  message: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nconst AIAssistant = () => {\n  const [messages, setMessages] = useState<ChatMessage[]>(aiChatHistory);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n\n  const quickSuggestions = [\n    \"What crops should I plant for next season?\",\n    \"How can I improve my soil health?\",\n    \"What are the best cover crops for my region?\",\n    \"How do I maximize carbon sequestration?\",\n  ];\n\n  const aiResponses = [\n    \"Based on your farm's data, I recommend implementing drip irrigation which can reduce water usage by up to 40% while maintaining optimal crop growth.\",\n    \"For improving soil health, consider adding organic compost and implementing cover cropping. These practices can increase soil organic matter by 15-20%.\",\n    \"The best cover crops for your region include winter rye, crimson clover, and radishes. They help with nitrogen fixation and soil structure improvement.\",\n    \"To maximize carbon sequestration, focus on no-till farming, cover crops, and rotational grazing. These can sequester 0.5-2 tons of CO₂ per acre annually.\",\n    \"Consider adjusting your irrigation schedule based on weather forecasts. The upcoming dry period suggests increasing water application by 20%.\",\n    \"Your soil pH levels indicate slightly acidic conditions. Adding agricultural lime could improve nutrient availability for your crops.\",\n  ];\n\n  const handleSendMessage = async (message?: string) => {\n    const messageText = message || inputMessage.trim();\n    if (!messageText) return;\n\n    // Generate unique IDs using timestamp to avoid duplicates\n    const timestamp = Date.now();\n    \n    // Add user message\n    const userMessage: ChatMessage = {\n      id: timestamp,\n      message: messageText,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage(\"\");\n    setIsTyping(true);\n\n    try {\n      // Connect to Express backend AI endpoint\n      const response = await fetch('/api/ai/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ question: messageText }),\n      });\n\n      let aiResponseText;\n      if (response.ok) {\n        const data = await response.json();\n        aiResponseText = data.response;\n      } else {\n        throw new Error(`Backend responded with status ${response.status}`);\n      }\n\n      const aiMessage: ChatMessage = {\n        id: timestamp + 1,\n        message: aiResponseText,\n        isUser: false,\n        timestamp: new Date(),\n      };\n      \n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('AI Assistant error:', error);\n      const errorMessage: ChatMessage = {\n        id: timestamp + 1,\n        message: \"I apologize, but I'm having trouble processing your request right now. Please try asking your question again, or try one of the suggested questions below.\",\n        isUser: false,\n        timestamp: new Date(),\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const handleQuickSuggestion = (suggestion: string) => {\n    handleSendMessage(suggestion);\n  };\n\n  const formatTime = (timestamp: Date) => {\n    return timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">AI Assistant</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Get instant answers to your farming questions and personalized recommendations\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Chat Interface */}\n          <Card className=\"lg:col-span-3 overflow-hidden\">\n            {/* Chat Header */}\n            <CardHeader className=\"gradient-bg text-white\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n                  <Lightbulb className=\"w-5 h-5\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-white\">Soma AI Assistant</CardTitle>\n                  <p className=\"text-green-100 text-sm\">Your sustainable farming expert</p>\n                </div>\n                <div className=\"ml-auto\">\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\n                </div>\n              </div>\n            </CardHeader>\n\n            {/* Chat Messages */}\n            <CardContent className=\"p-0\">\n              <ScrollArea className=\"h-96 p-4\">\n                <div className=\"space-y-4\">\n                  {messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex items-start space-x-3 ${\n                        message.isUser ? \"justify-end\" : \"\"\n                      }`}\n                    >\n                      {!message.isUser && (\n                        <div className=\"w-8 h-8 bg-soma-green rounded-full flex items-center justify-center flex-shrink-0\">\n                          <Bot className=\"w-4 h-4 text-white\" />\n                        </div>\n                      )}\n                      <div\n                        className={`max-w-xs lg:max-w-md rounded-lg p-3 ${\n                          message.isUser\n                            ? \"bg-soma-green text-white\"\n                            : \"bg-gray-100 text-gray-800\"\n                        }`}\n                      >\n                        <p className=\"text-sm whitespace-pre-wrap\">{message.message}</p>\n                        <span\n                          className={`text-xs mt-1 block ${\n                            message.isUser ? \"text-green-100\" : \"text-gray-500\"\n                          }`}\n                        >\n                          {formatTime(message.timestamp)}\n                        </span>\n                      </div>\n                      {message.isUser && (\n                        <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0\">\n                          <User className=\"w-4 h-4 text-gray-600\" />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                  \n                  {/* Typing Indicator */}\n                  {isTyping && (\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-soma-green rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Bot className=\"w-4 h-4 text-white\" />\n                      </div>\n                      <div className=\"bg-gray-100 rounded-lg p-3\">\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n\n              {/* Quick Suggestions */}\n              <div className=\"border-t p-4\">\n                <p className=\"text-sm font-medium text-gray-700 mb-3\">💡 Suggested Questions:</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {quickSuggestions.map((suggestion, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleQuickSuggestion(suggestion)}\n                      className=\"text-xs\"\n                    >\n                      {suggestion.length > 30 ? `${suggestion.substring(0, 30)}...` : suggestion}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Message Input */}\n              <div className=\"border-t p-4\">\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    handleSendMessage();\n                  }}\n                  className=\"flex space-x-3\"\n                >\n                  <Input\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    placeholder=\"Ask me anything about sustainable farming...\"\n                    className=\"flex-1 focus:ring-soma-green focus:border-soma-green\"\n                  />\n                  <Button \n                    type=\"submit\" \n                    disabled={!inputMessage.trim() || isTyping}\n                    className=\"bg-soma-green hover:bg-soma-green/90\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </form>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* AI Capabilities Sidebar */}\n          <div className=\"lg:col-span-1 space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">AI Capabilities</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                      <BarChart3 className=\"w-6 h-6 text-blue-500\" />\n                    </div>\n                    <h3 className=\"font-semibold text-gray-900 text-sm mb-1\">Data Analysis</h3>\n                    <p className=\"text-xs text-gray-600\">\n                      Analyzes your farm data to provide insights and predictions\n                    </p>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                      <Leaf className=\"w-6 h-6 text-green-500\" />\n                    </div>\n                    <h3 className=\"font-semibold text-gray-900 text-sm mb-1\">Sustainability Focus</h3>\n                    <p className=\"text-xs text-gray-600\">\n                      Specialized in regenerative and sustainable farming practices\n                    </p>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                      <Clock className=\"w-6 h-6 text-purple-500\" />\n                    </div>\n                    <h3 className=\"font-semibold text-gray-900 text-sm mb-1\">24/7 Available</h3>\n                    <p className=\"text-xs text-gray-600\">\n                      Get instant answers and recommendations anytime\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AIAssistant;\n","size_bytes":11961},"client/src/pages/About.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Leaf, Target, Users, Award } from \"lucide-react\";\n\nconst About = () => {\n  const values = [\n    {\n      icon: <Leaf className=\"w-8 h-8\" />,\n      title: \"Sustainability First\",\n      description: \"We believe in farming practices that protect and regenerate our planet for future generations.\"\n    },\n    {\n      icon: <Target className=\"w-8 h-8\" />,\n      title: \"Data-Driven Decisions\",\n      description: \"Empowering farmers with AI-powered insights to make informed, sustainable choices.\"\n    },\n    {\n      icon: <Users className=\"w-8 h-8\" />,\n      title: \"Community Impact\",\n      description: \"Supporting farming communities with tools that improve both yields and environmental health.\"\n    },\n    {\n      icon: <Award className=\"w-8 h-8\" />,\n      title: \"Innovation Excellence\",\n      description: \"Combining cutting-edge technology with proven agricultural wisdom.\"\n    }\n  ];\n\n  const team = [\n    {\n      name: \"Dr. Sarah Chen\",\n      role: \"Chief Agricultural Scientist\",\n      description: \"20+ years in sustainable agriculture research\"\n    },\n    {\n      name: \"Marcus Rodriguez\",\n      role: \"Lead AI Engineer\",\n      description: \"Expert in machine learning for agricultural applications\"\n    },\n    {\n      name: \"Emma Thompson\",\n      role: \"Sustainability Director\",\n      description: \"Former UN consultant on regenerative farming practices\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">About Soma Dashboard</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Revolutionizing agriculture through AI-powered sustainability insights\n          </p>\n        </div>\n\n        {/* Mission Section */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Our Mission</h2>\n              <p className=\"text-lg text-gray-600 max-w-3xl mx-auto\">\n                To empower farmers worldwide with intelligent technology that makes sustainable agriculture \n                accessible, profitable, and scalable. We envision a future where every farm contributes to \n                environmental restoration while feeding the world.\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {values.map((value, index) => (\n                <div key={index} className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-soma-green rounded-full flex items-center justify-center mx-auto mb-4 text-white\">\n                    {value.icon}\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">{value.title}</h3>\n                  <p className=\"text-sm text-gray-600\">{value.description}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Story Section */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Our Story</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose max-w-none text-gray-600\">\n              <p className=\"mb-4\">\n                Founded in 2023, Soma Dashboard emerged from a simple observation: farmers had access to more \n                data than ever before, but lacked the tools to transform that data into actionable insights \n                for sustainable farming.\n              </p>\n              <p className=\"mb-4\">\n                Our team of agricultural scientists, AI engineers, and sustainability experts came together \n                with a shared vision—to create a platform that makes regenerative agriculture both accessible \n                and profitable for farmers of all sizes.\n              </p>\n              <p>\n                Today, Soma Dashboard serves thousands of farmers worldwide, helping them reduce environmental \n                impact while improving yields and profitability. We're proud to be at the forefront of the \n                sustainable agriculture revolution.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Team Section */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Leadership Team</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {team.map((member, index) => (\n                <div key={index} className=\"text-center\">\n                  <div className=\"w-20 h-20 bg-gray-200 rounded-full mx-auto mb-4\"></div>\n                  <h3 className=\"font-semibold text-gray-900\">{member.name}</h3>\n                  <p className=\"text-soma-green font-medium text-sm mb-2\">{member.role}</p>\n                  <p className=\"text-xs text-gray-600\">{member.description}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Impact Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Our Impact</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-center\">\n              <div>\n                <div className=\"text-3xl font-bold text-soma-green mb-2\">10,000+</div>\n                <div className=\"text-gray-600\">Farmers Served</div>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold text-soma-green mb-2\">50M+</div>\n                <div className=\"text-gray-600\">Acres Optimized</div>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold text-soma-green mb-2\">2M+</div>\n                <div className=\"text-gray-600\">Tons CO₂ Sequestered</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default About;","size_bytes":6163},"client/src/pages/CarbonCredit.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { calculateCarbonCredits } from \"@/lib/calculations\";\nimport { Leaf, DollarSign, TrendingUp } from \"lucide-react\";\n\nconst CarbonCredit = () => {\n  const [formData, setFormData] = useState({\n    landSize: \"\",\n    duration: \"1\",\n    practices: [] as string[],\n  });\n  const [results, setResults] = useState<{\n    totalCarbon: number;\n    earnings: number;\n    annualCarbon: number;\n    annualEarnings: number;\n    breakdown: { practice: string; carbon: number; earnings: number }[];\n  } | null>(null);\n\n  const practiceOptions = [\n    { id: \"cover-crops\", label: \"Cover Crops\", value: 0.5 },\n    { id: \"no-till\", label: \"No-Till Farming\", value: 0.8 },\n    { id: \"crop-rotation\", label: \"Crop Rotation\", value: 0.3 },\n    { id: \"composting\", label: \"Organic Composting\", value: 0.4 },\n    { id: \"agroforestry\", label: \"Agroforestry\", value: 0.2 },\n  ];\n\n  const handlePracticeChange = (practiceId: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      practices: checked\n        ? [...prev.practices, practiceId]\n        : prev.practices.filter(p => p !== practiceId)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const landSize = parseFloat(formData.landSize) || 0;\n    const duration = parseFloat(formData.duration) || 1;\n    \n    if (landSize === 0 || formData.practices.length === 0) return;\n    \n    const analysis = calculateCarbonCredits(landSize, formData.practices, duration);\n    setResults(analysis);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Carbon Credit Estimator</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Calculate your potential carbon credit earnings from regenerative farming practices\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Input Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Carbon Calculation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"land-size\">Land Size (acres)</Label>\n                  <Input\n                    id=\"land-size\"\n                    type=\"number\"\n                    placeholder=\"100\"\n                    value={formData.landSize}\n                    onChange={(e) => setFormData(prev => ({ ...prev, landSize: e.target.value }))}\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                \n                <div>\n                  <Label>Practices Adopted</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    {practiceOptions.map((practice) => (\n                      <div key={practice.id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={practice.id}\n                          checked={formData.practices.includes(practice.id)}\n                          onCheckedChange={(checked) => \n                            handlePracticeChange(practice.id, checked as boolean)\n                          }\n                        />\n                        <label \n                          htmlFor={practice.id} \n                          className=\"text-sm cursor-pointer\"\n                        >\n                          {practice.label} (+{practice.value} tons CO₂/acre/year)\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"duration\">Duration (years)</Label>\n                  <Select value={formData.duration} onValueChange={(value) => setFormData(prev => ({ ...prev, duration: value }))}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 year</SelectItem>\n                      <SelectItem value=\"3\">3 years</SelectItem>\n                      <SelectItem value=\"5\">5 years</SelectItem>\n                      <SelectItem value=\"10\">10 years</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Button type=\"submit\" className=\"w-full bg-soma-green hover:bg-soma-green/90\">\n                  Calculate Carbon Credits\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Results Panel */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Carbon Credit Estimation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {results ? (\n                <div className=\"space-y-6\">\n                  {/* CO2 Saved */}\n                  <div className=\"text-center\">\n                    <div className=\"inline-flex items-center justify-center w-24 h-24 rounded-full bg-green-100 mb-4\">\n                      <span className=\"text-xl font-bold text-soma-green\">{results.totalCarbon}</span>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Total CO₂ Sequestered</h3>\n                    <p className=\"text-green-600 font-medium\">Tons over selected period</p>\n                  </div>\n\n                  {/* Earnings */}\n                  <div className=\"border-t pt-6\">\n                    <div className=\"flex justify-between items-center mb-3\">\n                      <h4 className=\"font-semibold text-gray-900 flex items-center gap-2\">\n                        <DollarSign className=\"w-4 h-4\" />\n                        Estimated Earnings\n                      </h4>\n                      <span className=\"text-2xl font-bold text-soma-yellow\">\n                        ${results.earnings.toLocaleString()}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-4\">\n                      Based on current carbon credit prices ($20/ton CO₂)\n                    </p>\n                    <div className=\"bg-yellow-50 p-3 rounded-lg\">\n                      <p className=\"text-sm text-yellow-800\">\n                        💡 <strong>Tip:</strong> Carbon credit prices can vary. This is an estimate for planning purposes.\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Annual Projection */}\n                  <div className=\"border-t pt-6\">\n                    <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center gap-2\">\n                      <TrendingUp className=\"w-4 h-4\" />\n                      Annual Projection\n                    </h4>\n                    <div className=\"grid grid-cols-2 gap-4 text-center\">\n                      <div className=\"bg-green-50 p-3 rounded-lg\">\n                        <div className=\"text-lg font-bold text-green-600\">{results.annualCarbon} tons</div>\n                        <div className=\"text-xs text-gray-600\">CO₂/year</div>\n                      </div>\n                      <div className=\"bg-yellow-50 p-3 rounded-lg\">\n                        <div className=\"text-lg font-bold text-yellow-600\">${results.annualEarnings.toLocaleString()}</div>\n                        <div className=\"text-xs text-gray-600\">Earnings/year</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Breakdown */}\n                  {results.breakdown.length > 0 && (\n                    <div className=\"border-t pt-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">📊 Breakdown by Practice</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        {results.breakdown.map((item, index) => (\n                          <div key={index} className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">{item.practice}</span>\n                            <span className=\"font-medium\">{item.carbon.toFixed(1)} tons CO₂</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <Leaf className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                  <p>Enter your land details and practices to calculate carbon credit potential</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Comparison Chart */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Conventional vs Regenerative CO₂ Impact</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <div className=\"text-center\">\n                <h3 className=\"font-medium text-gray-900 mb-4\">Conventional Farming</h3>\n                <div className=\"h-32 bg-red-100 rounded-lg flex items-center justify-center mb-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-red-600\">+2.5 tons</div>\n                    <div className=\"text-sm text-red-700\">CO₂ emissions per acre/year</div>\n                  </div>\n                </div>\n                <ul className=\"text-sm text-gray-600 space-y-1 text-left\">\n                  <li>• Heavy tillage releases stored carbon</li>\n                  <li>• Synthetic fertilizer production</li>\n                  <li>• Fuel consumption for equipment</li>\n                </ul>\n              </div>\n              <div className=\"text-center\">\n                <h3 className=\"font-medium text-gray-900 mb-4\">Regenerative Farming</h3>\n                <div className=\"h-32 bg-green-100 rounded-lg flex items-center justify-center mb-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">-1.8 tons</div>\n                    <div className=\"text-sm text-green-700\">CO₂ sequestered per acre/year</div>\n                  </div>\n                </div>\n                <ul className=\"text-sm text-gray-600 space-y-1 text-left\">\n                  <li>• Cover crops capture carbon</li>\n                  <li>• No-till preserves soil carbon</li>\n                  <li>• Reduced synthetic inputs</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default CarbonCredit;\n","size_bytes":11237},"client/src/pages/Contact.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Mail, Phone, MapPin, Clock } from \"lucide-react\";\n\nconst Contact = () => {\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    alert(\"Thank you for your message! We'll get back to you within 24 hours.\");\n  };\n\n  const contactInfo = [\n    {\n      icon: <Mail className=\"w-5 h-5\" />,\n      title: \"Email\",\n      content: \"hello@somadashboard.com\",\n      description: \"Send us an email anytime\"\n    },\n    {\n      icon: <Phone className=\"w-5 h-5\" />,\n      title: \"Phone\",\n      content: \"+1 (555) 123-4567\",\n      description: \"Mon-Fri from 8am to 6pm\"\n    },\n    {\n      icon: <MapPin className=\"w-5 h-5\" />,\n      title: \"Office\",\n      content: \"123 Agriculture St, Green Valley, CA 90210\",\n      description: \"Visit our headquarters\"\n    },\n    {\n      icon: <Clock className=\"w-5 h-5\" />,\n      title: \"Support Hours\",\n      content: \"24/7 Online Support\",\n      description: \"Always here to help\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Contact Us</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Get in touch with our team for support, partnerships, or general inquiries\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Contact Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Send us a Message</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      placeholder=\"John\"\n                      className=\"focus:ring-soma-green focus:border-soma-green\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      placeholder=\"Doe\"\n                      className=\"focus:ring-soma-green focus:border-soma-green\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"john@example.com\"\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"subject\">Subject</Label>\n                  <Select>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a topic\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"support\">Technical Support</SelectItem>\n                      <SelectItem value=\"sales\">Sales Inquiry</SelectItem>\n                      <SelectItem value=\"partnership\">Partnership</SelectItem>\n                      <SelectItem value=\"feedback\">Feedback</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea\n                    id=\"message\"\n                    placeholder=\"Tell us how we can help you...\"\n                    rows={5}\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                \n                <Button type=\"submit\" className=\"w-full bg-soma-green hover:bg-soma-green/90\">\n                  Send Message\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Get in Touch</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {contactInfo.map((info, index) => (\n                    <div key={index} className=\"flex items-start space-x-4\">\n                      <div className=\"w-10 h-10 bg-soma-green rounded-lg flex items-center justify-center text-white flex-shrink-0\">\n                        {info.icon}\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">{info.title}</h3>\n                        <p className=\"text-gray-700\">{info.content}</p>\n                        <p className=\"text-sm text-gray-500\">{info.description}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Frequently Asked Questions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-1\">How do I get started?</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      Simply create an account and start exploring our dashboard. Our AI assistant can guide you through the setup process.\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-1\">What data do I need?</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      Basic soil test results and farm information are all you need to start getting insights.\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-1\">Is my data secure?</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      Yes, we use industry-standard encryption and never share your farm data with third parties.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Contact;","size_bytes":6947},"client/src/pages/Dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  Cloud, \n  CheckCircle, \n  Heart, \n  Droplets, \n  Lightbulb,\n  TrendingUp,\n  BarChart3\n} from \"lucide-react\";\nimport { \n  LineChart, \n  Line, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  ResponsiveContainer \n} from \"recharts\";\nimport { weatherData, soilHealthData, carbonData, waterData } from \"@/data/mockData\";\n\nconst Dashboard = () => {\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Farm Dashboard</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Real-time insights into your farm's performance and sustainability metrics\n          </p>\n        </div>\n\n        {/* Metric Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Weather Summary</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{weatherData.temperature}°C</p>\n                  <p className=\"text-sm text-gray-600\">\n                    Humidity: {weatherData.humidity}% | Rain: {weatherData.rainfall}mm\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Cloud className=\"w-6 h-6 text-blue-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Soil Health Score</p>\n                  <p className=\"text-2xl font-bold text-soma-green\">{soilHealthData.score}/100</p>\n                  <p className=\"text-sm text-green-600\">{soilHealthData.status} condition</p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">CO₂ Saved</p>\n                  <p className=\"text-2xl font-bold text-soma-green\">{carbonData.totalSaved} tons</p>\n                  <p className=\"text-sm text-green-600\">This season</p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Heart className=\"w-6 h-6 text-green-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Water Efficiency</p>\n                  <p className=\"text-2xl font-bold text-blue-500\">{waterData.efficiency}%</p>\n                  <p className=\"text-sm text-blue-600\">Above average</p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Droplets className=\"w-6 h-6 text-blue-500\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Carbon Footprint Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Carbon Footprint Trend\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={carbonData.monthlyTrend}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"co2\" \n                      stroke=\"hsl(122, 41%, 35%)\" \n                      strokeWidth={3}\n                      dot={{ fill: \"hsl(122, 41%, 35%)\", strokeWidth: 2, r: 4 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Water Usage Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Water Usage vs Rainfall\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={waterData.monthlyUsage}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Bar dataKey=\"usage\" fill=\"#3B82F6\" name=\"Water Usage\" />\n                    <Bar dataKey=\"rainfall\" fill=\"hsl(122, 41%, 35%)\" name=\"Rainfall\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n              <div className=\"flex justify-center mt-4 space-x-4 text-sm\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-4 h-4 bg-blue-500 rounded mr-2\"></div>\n                  Water Usage\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-4 h-4 bg-soma-green rounded mr-2\"></div>\n                  Rainfall\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* AI Tip Box */}\n        <Card className=\"gradient-bg text-white\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"w-12 h-12 bg-white bg-opacity-20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <Lightbulb className=\"w-6 h-6\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-semibold mb-2\">💡 AI Tip of the Day</h3>\n                <p className=\"mb-4\">\n                  Based on current weather patterns and soil moisture levels, consider reducing \n                  irrigation by 15% this week. This could save approximately 2,000 gallons while \n                  maintaining optimal crop growth.\n                </p>\n                <Link href=\"/ai-assistant\">\n                  <Button variant=\"secondary\" className=\"bg-white text-purple-600 hover:bg-gray-100\">\n                    Ask AI Assistant\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","size_bytes":7793},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  CheckCircle, \n  Droplets, \n  Heart, \n  DollarSign, \n  Lightbulb, \n  FileText,\n  ArrowRight \n} from \"lucide-react\";\n\nconst Home = () => {\n  const features = [\n    {\n      icon: <CheckCircle className=\"w-6 h-6\" />,\n      title: \"Soil Health Monitoring\",\n      description: \"Real-time analysis of soil pH, nutrients, and organic matter to optimize crop growth.\",\n      link: \"/soil-health\",\n      color: \"bg-soma-green\",\n    },\n    {\n      icon: <Droplets className=\"w-6 h-6\" />,\n      title: \"Water Efficiency\",\n      description: \"Smart irrigation recommendations to reduce water waste and improve crop yields.\",\n      link: \"/water-usage\",\n      color: \"bg-blue-500\",\n    },\n    {\n      icon: <Heart className=\"w-6 h-6\" />,\n      title: \"Regenerative Practices\",\n      description: \"Implement sustainable farming methods that restore soil health and biodiversity.\",\n      link: \"/practices\",\n      color: \"bg-green-500\",\n    },\n    {\n      icon: <DollarSign className=\"w-6 h-6\" />,\n      title: \"Carbon Credit Estimator\",\n      description: \"Calculate potential earnings from carbon sequestration and sustainable practices.\",\n      link: \"/carbon-credits\",\n      color: \"bg-soma-yellow text-gray-900\",\n    },\n    {\n      icon: <Lightbulb className=\"w-6 h-6\" />,\n      title: \"AI Assistant\",\n      description: \"Get personalized recommendations and answers to your farming questions 24/7.\",\n      link: \"/ai-assistant\",\n      color: \"bg-purple-500\",\n    },\n    {\n      icon: <FileText className=\"w-6 h-6\" />,\n      title: \"Sustainability Reports\",\n      description: \"Generate comprehensive reports on your farm's environmental impact and progress.\",\n      link: \"/reports\",\n      color: \"bg-indigo-500\",\n    },\n  ];\n\n  return (\n    <div className=\"fade-in\">\n      {/* Hero Section */}\n      <section \n        className=\"relative h-screen bg-cover bg-center bg-no-repeat flex items-center justify-center\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(46, 125, 50, 0.7), rgba(46, 125, 50, 0.7)), url('https://images.unsplash.com/photo-1625246333195-78d9c38ad449?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&h=1080')`\n        }}\n      >\n        <div className=\"text-center text-white px-4\">\n          <h1 className=\"text-5xl md:text-7xl font-bold mb-6 floating-animation\">\n            Grow Smarter.<br />Greener. Together.\n          </h1>\n          <p className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto\">\n            Harness the power of AI to optimize your farm's sustainability, increase yields, \n            and protect our planet for future generations.\n          </p>\n          <Link href=\"/dashboard\">\n            <Button \n              size=\"lg\" \n              className=\"bg-soma-yellow hover:bg-yellow-500 text-gray-900 font-bold py-4 px-8 text-lg transform hover:scale-105 transition-all duration-300 shadow-lg\"\n            >\n              View Dashboard\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Features Overview */}\n      <section className=\"py-16 bg-soma-grey\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Empowering Sustainable Agriculture\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Our comprehensive platform provides real-time insights and AI-powered recommendations \n              to help you make informed decisions for a sustainable future.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card \n                key={index}\n                className=\"hover:shadow-xl transition-shadow duration-300 transform hover:-translate-y-1\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className={`w-12 h-12 ${feature.color} rounded-lg flex items-center justify-center mb-4 text-white`}>\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">{feature.title}</h3>\n                  <p className=\"text-gray-600 mb-4\">{feature.description}</p>\n                  <Link href={feature.link}>\n                    <Button variant=\"ghost\" className=\"text-soma-green font-medium hover:text-green-700 p-0\">\n                      Learn More <ArrowRight className=\"w-4 h-4 ml-1\" />\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How Soma Empowers Farmers */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              How Soma Empowers Farmers\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              From data collection to actionable insights, see how our platform transforms farming.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 items-center\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-soma-green rounded-full flex items-center justify-center mx-auto mb-4 floating-animation\">\n                <span className=\"text-white font-bold text-xl\">1</span>\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">Data Collection</h3>\n              <p className=\"text-gray-600\">Monitor soil, water, and environmental conditions</p>\n            </div>\n            \n            <div className=\"hidden md:flex justify-center\">\n              <ArrowRight className=\"w-8 h-8 text-soma-green\" />\n            </div>\n            \n            <div className=\"text-center\">\n              <div \n                className=\"w-16 h-16 bg-soma-green rounded-full flex items-center justify-center mx-auto mb-4 floating-animation\"\n                style={{ animationDelay: '1s' }}\n              >\n                <span className=\"text-white font-bold text-xl\">2</span>\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">AI Analysis</h3>\n              <p className=\"text-gray-600\">Process data with advanced machine learning</p>\n            </div>\n            \n            <div className=\"hidden md:flex justify-center\">\n              <ArrowRight className=\"w-8 h-8 text-soma-green\" />\n            </div>\n            \n            <div className=\"text-center\">\n              <div \n                className=\"w-16 h-16 bg-soma-green rounded-full flex items-center justify-center mx-auto mb-4 floating-animation\"\n                style={{ animationDelay: '2s' }}\n              >\n                <span className=\"text-white font-bold text-xl\">3</span>\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">Smart Recommendations</h3>\n              <p className=\"text-gray-600\">Receive personalized farming insights</p>\n            </div>\n            \n            <div className=\"hidden md:flex justify-center\">\n              <ArrowRight className=\"w-8 h-8 text-soma-green\" />\n            </div>\n            \n            <div className=\"text-center\">\n              <div \n                className=\"w-16 h-16 bg-soma-yellow rounded-full flex items-center justify-center mx-auto mb-4 floating-animation\"\n                style={{ animationDelay: '3s' }}\n              >\n                <span className=\"text-gray-900 font-bold text-xl\">4</span>\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">Sustainable Growth</h3>\n              <p className=\"text-gray-600\">Implement changes for better yields and planet health</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n","size_bytes":8184},"client/src/pages/Privacy.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, Eye, Lock, UserCheck } from \"lucide-react\";\n\nconst Privacy = () => {\n  const principles = [\n    {\n      icon: <Shield className=\"w-6 h-6\" />,\n      title: \"Data Protection\",\n      description: \"Your farm data is protected with enterprise-grade security measures.\"\n    },\n    {\n      icon: <Eye className=\"w-6 h-6\" />,\n      title: \"Transparency\",\n      description: \"We clearly explain what data we collect and how we use it.\"\n    },\n    {\n      icon: <Lock className=\"w-6 h-6\" />,\n      title: \"Secure Storage\",\n      description: \"All data is encrypted in transit and at rest using industry standards.\"\n    },\n    {\n      icon: <UserCheck className=\"w-6 h-6\" />,\n      title: \"User Control\",\n      description: \"You maintain full control over your data with easy export and deletion options.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Privacy Policy</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Last updated: December 2024\n          </p>\n        </div>\n\n        {/* Privacy Principles */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Our Privacy Principles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {principles.map((principle, index) => (\n                <div key={index} className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-soma-green rounded-lg flex items-center justify-center text-white flex-shrink-0\">\n                    {principle.icon}\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">{principle.title}</h3>\n                    <p className=\"text-sm text-gray-600\">{principle.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Information We Collect */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Information We Collect</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Farm Data</h3>\n              <ul className=\"list-disc list-inside text-gray-600 space-y-1 text-sm\">\n                <li>Soil test results and field measurements</li>\n                <li>Crop types and farming practices</li>\n                <li>Weather and environmental data</li>\n                <li>Equipment and irrigation information</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Account Information</h3>\n              <ul className=\"list-disc list-inside text-gray-600 space-y-1 text-sm\">\n                <li>Name, email address, and contact details</li>\n                <li>Farm location and size</li>\n                <li>Subscription and billing information</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Usage Data</h3>\n              <ul className=\"list-disc list-inside text-gray-600 space-y-1 text-sm\">\n                <li>Platform usage patterns and feature interactions</li>\n                <li>AI assistant conversations and recommendations</li>\n                <li>Dashboard views and report downloads</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* How We Use Information */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>How We Use Your Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-gray-600\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Service Delivery</h3>\n                <p className=\"text-sm\">\n                  We use your farm data to provide personalized recommendations, generate reports, \n                  and deliver AI-powered insights to help optimize your farming operations.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Platform Improvement</h3>\n                <p className=\"text-sm\">\n                  Aggregated, anonymized data helps us improve our AI models and develop \n                  new features to better serve the farming community.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Communication</h3>\n                <p className=\"text-sm\">\n                  We may contact you with important updates, new features, or educational \n                  content related to sustainable farming practices.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Sharing */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Data Sharing and Third Parties</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-green-50 p-4 rounded-lg mb-4\">\n              <p className=\"text-sm text-green-800\">\n                <strong>We do not sell your personal farm data to third parties.</strong>\n              </p>\n            </div>\n            <div className=\"space-y-4 text-gray-600 text-sm\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Research Partners</h3>\n                <p>\n                  With your explicit consent, we may share anonymized, aggregated data with \n                  agricultural research institutions to advance sustainable farming research.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Service Providers</h3>\n                <p>\n                  We work with trusted service providers for hosting, analytics, and customer \n                  support, all bound by strict data protection agreements.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Your Rights */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Your Rights and Controls</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Access Your Data</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    Download a copy of all your farm data and reports anytime.\n                  </p>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Update Information</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    Correct or update your account and farm information.\n                  </p>\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Delete Your Data</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    Request complete deletion of your account and associated data.\n                  </p>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Data Portability</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    Export your data in standard formats for use with other platforms.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Contact Us About Privacy</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-600 mb-4\">\n              If you have questions about this privacy policy or how we handle your data, \n              please contact our privacy team:\n            </p>\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <p className=\"text-sm\"><strong>Email:</strong> privacy@somadashboard.com</p>\n              <p className=\"text-sm\"><strong>Address:</strong> 123 Agriculture St, Green Valley, CA 90210</p>\n              <p className=\"text-sm\"><strong>Response Time:</strong> We typically respond within 48 hours</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Privacy;","size_bytes":8854},"client/src/pages/RegenerativePractices.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { practicesData } from \"@/data/mockData\";\nimport { calculatePracticeImpact } from \"@/lib/calculations\";\nimport { Leaf, Clock, TrendingUp } from \"lucide-react\";\n\nconst RegenerativePractices = () => {\n  const [selectedPractices, setSelectedPractices] = useState<string[]>([]);\n\n  const handlePracticeChange = (practiceId: string, checked: boolean) => {\n    setSelectedPractices(prev => \n      checked \n        ? [...prev, practiceId]\n        : prev.filter(id => id !== practiceId)\n    );\n  };\n\n  const impact = calculatePracticeImpact(selectedPractices);\n  const hasSelectedPractices = selectedPractices.length > 0;\n\n  const getRecommendations = () => {\n    if (selectedPractices.length === 0) {\n      return [{\n        title: \"Getting Started\",\n        content: \"Select practices above to see personalized benefits and implementation guidance.\",\n        type: \"info\"\n      }];\n    }\n\n    const recommendations = [\n      {\n        title: \"Implementation Priority\",\n        content: \"Start with cover cropping and no-till farming for maximum soil health benefits.\",\n        type: \"priority\"\n      },\n      {\n        title: \"Expected Timeline\",\n        content: \"You should see initial results within 6-12 months, with full benefits in 2-3 years.\",\n        type: \"timeline\"\n      },\n      {\n        title: \"Cost Considerations\",\n        content: \"Initial investment will be offset by reduced input costs and improved yields over time.\",\n        type: \"cost\"\n      }\n    ];\n\n    return recommendations;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Regenerative Farming Practices</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Select the practices you're implementing to get personalized benefits analysis\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Practices Checklist */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Leaf className=\"w-5 h-5 text-soma-green\" />\n                  Select Your Practices\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {practicesData.map((practice) => (\n                    <div \n                      key={practice.id}\n                      className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Checkbox\n                          id={practice.id}\n                          checked={selectedPractices.includes(practice.id)}\n                          onCheckedChange={(checked) => \n                            handlePracticeChange(practice.id, checked as boolean)\n                          }\n                        />\n                        <div>\n                          <label \n                            htmlFor={practice.id} \n                            className=\"font-medium text-gray-900 cursor-pointer\"\n                          >\n                            {practice.name}\n                          </label>\n                          <p className=\"text-sm text-gray-600\">{practice.description}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-green-500 font-medium text-sm\">\n                        {practice.benefit}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Recommendations Panel */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"sticky top-24 space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    🤖 AI Recommendations\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {getRecommendations().map((rec, index) => (\n                      <div key={index} className=\"bg-soma-grey p-4 rounded-lg\">\n                        <h3 className=\"font-medium text-gray-900 mb-2\">{rec.title}</h3>\n                        <p className=\"text-sm text-gray-600\">{rec.content}</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Benefits Summary */}\n              {hasSelectedPractices && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5\" />\n                      Expected Benefits\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">Soil Health Improvement</span>\n                        <span className=\"font-medium text-green-600\">+{impact.soil}%</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">Carbon Sequestration</span>\n                        <span className=\"font-medium text-green-600\">+{impact.carbon}%</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">Water Efficiency</span>\n                        <span className=\"font-medium text-blue-600\">+{impact.water}%</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">Biodiversity</span>\n                        <span className=\"font-medium text-green-600\">+{impact.biodiversity}%</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Implementation Timeline */}\n              {hasSelectedPractices && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Clock className=\"w-5 h-5\" />\n                      Implementation Timeline\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-gray-600\">Month 1-2: Planning and preparation</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                        <span className=\"text-gray-600\">Month 3-6: Initial implementation</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                        <span className=\"text-gray-600\">Month 6+: Monitor and optimize</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegenerativePractices;\n","size_bytes":8110},"client/src/pages/SoilHealth.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { calculateSoilHealth } from \"@/lib/calculations\";\nimport { CheckCircle } from \"lucide-react\";\n\nconst SoilHealth = () => {\n  const [formData, setFormData] = useState({\n    pH: \"\",\n    nitrogen: \"\",\n    phosphorus: \"\",\n    potassium: \"\",\n  });\n  const [results, setResults] = useState<{\n    score: number;\n    status: string;\n    recommendations: string[];\n  } | null>(null);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const pH = parseFloat(formData.pH) || 6.5;\n    const nitrogen = parseFloat(formData.nitrogen) || 25;\n    const phosphorus = parseFloat(formData.phosphorus) || 15;\n    const potassium = parseFloat(formData.potassium) || 120;\n    \n    const analysis = calculateSoilHealth(pH, nitrogen, phosphorus, potassium);\n    setResults(analysis);\n  };\n\n  const getNutrientStatus = (level: number, thresholds: { good: number; optimal: number }) => {\n    if (level >= thresholds.optimal) return { status: \"Optimal\", color: \"text-green-600\", progress: 100 };\n    if (level >= thresholds.good) return { status: \"Good\", color: \"text-yellow-600\", progress: 75 };\n    return { status: \"Low\", color: \"text-red-600\", progress: 40 };\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Excellent\": return \"text-green-600\";\n      case \"Good\": return \"text-green-600\";\n      case \"Moderate\": return \"text-yellow-600\";\n      default: return \"text-red-600\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Soil Health Analysis</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Enter your soil test results to get personalized recommendations\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Input Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Soil Test Data</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"pH\">Soil pH Level</Label>\n                  <Input\n                    id=\"pH\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    max=\"14\"\n                    placeholder=\"6.5\"\n                    value={formData.pH}\n                    onChange={(e) => handleInputChange(\"pH\", e.target.value)}\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"nitrogen\">Nitrogen (ppm)</Label>\n                  <Input\n                    id=\"nitrogen\"\n                    type=\"number\"\n                    placeholder=\"25\"\n                    value={formData.nitrogen}\n                    onChange={(e) => handleInputChange(\"nitrogen\", e.target.value)}\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phosphorus\">Phosphorus (ppm)</Label>\n                  <Input\n                    id=\"phosphorus\"\n                    type=\"number\"\n                    placeholder=\"15\"\n                    value={formData.phosphorus}\n                    onChange={(e) => handleInputChange(\"phosphorus\", e.target.value)}\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"potassium\">Potassium (ppm)</Label>\n                  <Input\n                    id=\"potassium\"\n                    type=\"number\"\n                    placeholder=\"120\"\n                    value={formData.potassium}\n                    onChange={(e) => handleInputChange(\"potassium\", e.target.value)}\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full bg-soma-green hover:bg-soma-green/90\">\n                  Analyze Soil Health\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Results Panel */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Analysis Results</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {results ? (\n                <div className=\"space-y-6\">\n                  {/* Health Score */}\n                  <div className=\"text-center\">\n                    <div className=\"inline-flex items-center justify-center w-24 h-24 rounded-full bg-green-100 mb-4\">\n                      <span className=\"text-2xl font-bold text-soma-green\">{results.score}</span>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Soil Health Score</h3>\n                    <p className={`font-medium ${getStatusColor(results.status)}`}>{results.status} Condition</p>\n                  </div>\n\n                  {/* Recommendations */}\n                  <div className=\"border-t pt-6\">\n                    <h4 className=\"font-semibold text-gray-900 mb-3\">🌱 Recommendations</h4>\n                    <ul className=\"space-y-2 text-sm text-gray-600\">\n                      {results.recommendations.map((rec, index) => (\n                        <li key={index} className=\"flex items-start\">\n                          <span className=\"text-green-500 mr-2\">•</span>\n                          {rec}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {/* Nutrient Levels */}\n                  <div className=\"border-t pt-6\">\n                    <h4 className=\"font-semibold text-gray-900 mb-3\">📊 Nutrient Analysis</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        { \n                          name: \"pH Level\", \n                          value: parseFloat(formData.pH) || 6.5,\n                          ...getNutrientStatus(parseFloat(formData.pH) || 6.5, { good: 6.0, optimal: 6.5 })\n                        },\n                        { \n                          name: \"Nitrogen\", \n                          value: parseFloat(formData.nitrogen) || 25,\n                          ...getNutrientStatus(parseFloat(formData.nitrogen) || 25, { good: 20, optimal: 30 })\n                        },\n                        { \n                          name: \"Phosphorus\", \n                          value: parseFloat(formData.phosphorus) || 15,\n                          ...getNutrientStatus(parseFloat(formData.phosphorus) || 15, { good: 10, optimal: 20 })\n                        },\n                        { \n                          name: \"Potassium\", \n                          value: parseFloat(formData.potassium) || 120,\n                          ...getNutrientStatus(parseFloat(formData.potassium) || 120, { good: 100, optimal: 150 })\n                        },\n                      ].map((nutrient, index) => (\n                        <div key={index}>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span>{nutrient.name}</span>\n                            <span className={nutrient.color}>{nutrient.status}</span>\n                          </div>\n                          <Progress value={nutrient.progress} className=\"h-2\" />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <CheckCircle className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                  <p>Enter your soil test data to see analysis results</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SoilHealth;\n","size_bytes":8558},"client/src/pages/SustainabilityReport.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { sustainabilityMetrics } from \"@/data/mockData\";\nimport { Download, TrendingUp, CheckCircle, ArrowUp } from \"lucide-react\";\n\nconst SustainabilityReport = () => {\n  const handleDownloadReport = () => {\n    // In production, this would generate and download a real PDF\n    const link = document.createElement('a');\n    link.href = '#';\n    link.download = 'soma-sustainability-report-2024.pdf';\n    // Simulate download\n    alert('🎉 Sustainability report downloaded! In production, this would generate and download a comprehensive PDF report.');\n  };\n\n  const certifications = [\n    { name: \"Regenerative Organic\", status: \"Certified\", emoji: \"🌱\", color: \"bg-green-50 text-green-700\" },\n    { name: \"Water Stewardship\", status: \"Gold Level\", emoji: \"💧\", color: \"bg-blue-50 text-blue-700\" },\n    { name: \"Carbon Neutral\", status: \"In Progress\", emoji: \"🏅\", color: \"bg-yellow-50 text-yellow-700\" },\n    { name: \"Biodiversity\", status: \"Verified\", emoji: \"🦋\", color: \"bg-purple-50 text-purple-700\" },\n  ];\n\n  const environmentalImpacts = [\n    { label: \"Reduced water usage by 32%\", type: \"positive\" },\n    { label: \"Improved soil organic matter by 18%\", type: \"positive\" },\n    { label: \"Increased biodiversity index by 25%\", type: \"positive\" },\n    { label: \"Reduced synthetic fertilizer use by 40%\", type: \"positive\" },\n  ];\n\n  const improvements = [\n    { label: \"Expand cover crop coverage to 100%\", type: \"improvement\" },\n    { label: \"Implement precision irrigation\", type: \"improvement\" },\n    { label: \"Add windbreaks for erosion control\", type: \"improvement\" },\n    { label: \"Integrate livestock for rotational grazing\", type: \"improvement\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Sustainability Report</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Comprehensive overview of your farm's environmental impact and progress\n          </p>\n        </div>\n\n        {/* Report Preview */}\n        <Card>\n          <CardContent className=\"p-8\">\n            {/* Header */}\n            <div className=\"border-b pb-6 mb-8\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 flex items-center gap-2\">\n                    🌱 Soma Sustainability Report\n                  </h2>\n                  <p className=\"text-gray-600\">Generated on December 2024</p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm text-gray-500\">Farm ID: SMS-2024-001</div>\n                  <div className=\"text-sm text-gray-500\">Report Period: Jan - Dec 2024</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-soma-green\">{sustainabilityMetrics.soilHealthScore}</div>\n                <div className=\"text-sm text-gray-600\">Soil Health Score</div>\n                <div className=\"text-xs text-green-600 flex items-center justify-center gap-1\">\n                  <ArrowUp className=\"w-3 h-3\" />\n                  {sustainabilityMetrics.improvementFromLastYear.soil}% from last year\n                </div>\n              </div>\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-blue-500\">{sustainabilityMetrics.waterEfficiency}%</div>\n                <div className=\"text-sm text-gray-600\">Water Efficiency</div>\n                <div className=\"text-xs text-blue-600 flex items-center justify-center gap-1\">\n                  <ArrowUp className=\"w-3 h-3\" />\n                  {sustainabilityMetrics.improvementFromLastYear.water}% improvement\n                </div>\n              </div>\n              <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                <div className=\"text-3xl font-bold text-soma-green\">{sustainabilityMetrics.co2Sequestered}</div>\n                <div className=\"text-sm text-gray-600\">Tons CO₂ Sequestered</div>\n                <div className=\"text-xs text-green-600 flex items-center justify-center gap-1\">\n                  <ArrowUp className=\"w-3 h-3\" />\n                  {sustainabilityMetrics.improvementFromLastYear.carbon}% increase\n                </div>\n              </div>\n            </div>\n\n            {/* Charts Section */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n              {/* Monthly Progress */}\n              <div className=\"border rounded-lg p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n                  <TrendingUp className=\"w-4 h-4\" />\n                  Monthly Sustainability Progress\n                </h3>\n                <div className=\"h-48 flex items-end justify-between space-x-1\">\n                  {sustainabilityMetrics.monthlyProgress.map((progress, index) => (\n                    <div \n                      key={index}\n                      className=\"bg-soma-green w-8 hover:bg-soma-green/80 transition-colors cursor-pointer\"\n                      style={{ height: `${(progress / 100) * 100}%` }}\n                      title={`Month ${index + 1}: ${progress}%`}\n                    />\n                  ))}\n                </div>\n                <div className=\"flex justify-between text-xs text-gray-500 mt-2\">\n                  <span>Jan</span>\n                  <span>Jun</span>\n                  <span>Dec</span>\n                </div>\n              </div>\n\n              {/* Practice Implementation */}\n              <div className=\"border rounded-lg p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Regenerative Practices Adopted</h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(sustainabilityMetrics.practiceAdoption).map(([practice, percentage]) => (\n                    <div key={practice}>\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"text-sm capitalize\">\n                          {practice.replace(/([A-Z])/g, ' $1').trim()}\n                        </span>\n                        <span className=\"text-sm text-green-600\">{percentage}%</span>\n                      </div>\n                      <Progress value={percentage} className=\"h-2\" />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Environmental Impact */}\n            <div className=\"border-t pt-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Environmental Impact Summary</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-3 flex items-center gap-2\">\n                    🌍 Positive Impact\n                  </h4>\n                  <ul className=\"space-y-2 text-sm text-gray-600\">\n                    {environmentalImpacts.map((impact, index) => (\n                      <li key={index} className=\"flex items-center\">\n                        <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />\n                        {impact.label}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-3\">🎯 Areas for Improvement</h4>\n                  <ul className=\"space-y-2 text-sm text-gray-600\">\n                    {improvements.map((improvement, index) => (\n                      <li key={index} className=\"flex items-center\">\n                        <span className=\"text-yellow-500 mr-2 flex-shrink-0\">→</span>\n                        {improvement.label}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            {/* Certifications */}\n            <div className=\"border-t pt-6 mb-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">🏆 Sustainability Certifications</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {certifications.map((cert, index) => (\n                  <div key={index} className={`text-center p-3 ${cert.color} rounded-lg`}>\n                    <div className=\"text-2xl mb-1\">{cert.emoji}</div>\n                    <div className=\"text-xs font-medium\">{cert.name}</div>\n                    <div className=\"text-xs\">{cert.status}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Footer */}\n            <div className=\"border-t pt-6 text-center\">\n              <p className=\"text-sm text-gray-500 mb-4\">\n                This report is generated using AI-powered analysis and verified data collection methods.\n              </p>\n              <Button \n                onClick={handleDownloadReport}\n                className=\"bg-soma-green hover:bg-soma-green/90 gap-2\"\n              >\n                <Download className=\"w-4 h-4\" />\n                Download PDF Report\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default SustainabilityReport;\n","size_bytes":9777},"client/src/pages/Terms.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText, Scale, AlertTriangle, CheckCircle } from \"lucide-react\";\n\nconst Terms = () => {\n  const keyTerms = [\n    {\n      icon: <CheckCircle className=\"w-5 h-5\" />,\n      title: \"Service Access\",\n      description: \"Free trial access with premium features available through subscription\"\n    },\n    {\n      icon: <FileText className=\"w-5 h-5\" />,\n      title: \"Data Ownership\",\n      description: \"You retain full ownership of your farm data and can export it anytime\"\n    },\n    {\n      icon: <Scale className=\"w-5 h-5\" />,\n      title: \"Fair Use\",\n      description: \"Use our platform responsibly and in accordance with agricultural best practices\"\n    },\n    {\n      icon: <AlertTriangle className=\"w-5 h-5\" />,\n      title: \"Limitations\",\n      description: \"Our recommendations are advisory; final farming decisions remain yours\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Terms of Service</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Last updated: December 2024\n          </p>\n        </div>\n\n        {/* Key Terms Overview */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Key Terms at a Glance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {keyTerms.map((term, index) => (\n                <div key={index} className=\"flex items-start space-x-4\">\n                  <div className=\"w-10 h-10 bg-soma-green rounded-lg flex items-center justify-center text-white flex-shrink-0\">\n                    {term.icon}\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-1\">{term.title}</h3>\n                    <p className=\"text-sm text-gray-600\">{term.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Acceptance of Terms */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>1. Acceptance of Terms</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-gray-600\">\n            <p className=\"mb-4\">\n              By accessing and using Soma Dashboard, you accept and agree to be bound by the terms \n              and provision of this agreement. If you do not agree to these terms, you should not \n              use our service.\n            </p>\n            <p>\n              These terms apply to all users of the service, including farmers, agricultural \n              consultants, and research institutions.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Service Description */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>2. Service Description</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-gray-600\">\n            <p className=\"mb-4\">\n              Soma Dashboard provides AI-powered agricultural insights and recommendations to help \n              farmers implement sustainable farming practices. Our services include:\n            </p>\n            <ul className=\"list-disc list-inside space-y-2 mb-4\">\n              <li>Soil health analysis and recommendations</li>\n              <li>Water usage optimization tools</li>\n              <li>Carbon credit estimation</li>\n              <li>Regenerative practice guidance</li>\n              <li>AI-powered farming assistant</li>\n              <li>Sustainability reporting</li>\n            </ul>\n            <p>\n              We reserve the right to modify, suspend, or discontinue any part of our service \n              with reasonable notice to users.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* User Responsibilities */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>3. User Responsibilities</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-gray-600\">\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Account Security</h3>\n                <p className=\"text-sm\">\n                  You are responsible for maintaining the confidentiality of your account \n                  credentials and for all activities that occur under your account.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Accurate Information</h3>\n                <p className=\"text-sm\">\n                  You agree to provide accurate, current, and complete information about your \n                  farm and farming practices for optimal service delivery.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Lawful Use</h3>\n                <p className=\"text-sm\">\n                  You must use our service in compliance with all applicable laws and regulations, \n                  including environmental and agricultural regulations in your jurisdiction.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Disclaimer */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>4. Disclaimer and Limitations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-yellow-50 p-4 rounded-lg mb-4\">\n              <p className=\"text-sm text-yellow-800\">\n                <strong>Important:</strong> Soma Dashboard provides advisory recommendations only. \n                All farming decisions and their outcomes remain solely your responsibility.\n              </p>\n            </div>\n            <div className=\"space-y-4 text-gray-600 text-sm\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">No Warranty</h3>\n                <p>\n                  Our service is provided \"as is\" without warranty of any kind. We do not \n                  guarantee specific farming outcomes or results.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Professional Consultation</h3>\n                <p>\n                  Our AI recommendations should supplement, not replace, professional agricultural \n                  consultation and your own farming expertise.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Environmental Factors</h3>\n                <p>\n                  Weather, soil conditions, and other environmental factors can affect outcomes. \n                  Always consider local conditions when implementing recommendations.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Subscription and Billing */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>5. Subscription and Billing</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-gray-600 text-sm\">\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Free Trial</h3>\n                <p>\n                  New users receive a 30-day free trial with access to basic features. \n                  No credit card required for trial access.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Subscription Plans</h3>\n                <p>\n                  Continued access to premium features requires a subscription. Billing occurs \n                  monthly or annually based on your selected plan.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Cancellation</h3>\n                <p>\n                  You may cancel your subscription at any time. Access to premium features \n                  continues until the end of your billing period.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Intellectual Property */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>6. Intellectual Property</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-gray-600 text-sm\">\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Our Content</h3>\n                <p>\n                  All software, algorithms, and content provided by Soma Dashboard remain our \n                  intellectual property or that of our licensors.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Your Data</h3>\n                <p>\n                  You retain all rights to your farm data. We only use your data to provide \n                  services as outlined in our Privacy Policy.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Changes to Terms */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>7. Changes to These Terms</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-gray-600 text-sm\">\n            <p className=\"mb-4\">\n              We may update these terms from time to time. We will notify users of significant \n              changes via email and through in-app notifications.\n            </p>\n            <p>\n              Continued use of our service after changes indicates acceptance of the updated terms.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>8. Contact Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-600 mb-4\">\n              If you have questions about these terms of service, please contact us:\n            </p>\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <p className=\"text-sm\"><strong>Email:</strong> legal@somadashboard.com</p>\n              <p className=\"text-sm\"><strong>Address:</strong> 123 Agriculture St, Green Valley, CA 90210</p>\n              <p className=\"text-sm\"><strong>Phone:</strong> +1 (555) 123-4567</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Terms;","size_bytes":10796},"client/src/pages/WaterUsage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { calculateWaterUsage } from \"@/lib/calculations\";\nimport { cropTypes, irrigationMethods } from \"@/data/mockData\";\nimport { Droplets, Calendar } from \"lucide-react\";\n\nconst WaterUsage = () => {\n  const [formData, setFormData] = useState({\n    cropType: \"\",\n    irrigationMethod: \"\",\n    rainfall: \"\",\n    fieldSize: \"\",\n  });\n  const [results, setResults] = useState<{\n    totalUsage: number;\n    efficiency: number;\n    tips: string[];\n    weeklySchedule: { day: string; amount: number }[];\n  } | null>(null);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const rainfall = parseFloat(formData.rainfall) || 0;\n    const fieldSize = parseFloat(formData.fieldSize) || 10;\n    \n    if (!formData.cropType || !formData.irrigationMethod) return;\n    \n    const analysis = calculateWaterUsage(\n      formData.cropType,\n      formData.irrigationMethod,\n      rainfall,\n      fieldSize\n    );\n    setResults(analysis);\n  };\n\n  const getEfficiencyColor = (efficiency: number) => {\n    if (efficiency >= 80) return \"text-green-600\";\n    if (efficiency >= 60) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-soma-grey py-8 fade-in\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Water Usage Optimization</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Optimize your irrigation strategy based on crop type and conditions\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Input Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Irrigation Planning</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"crop-type\">Crop Type</Label>\n                  <Select value={formData.cropType} onValueChange={(value) => handleInputChange(\"cropType\", value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select crop type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {cropTypes.map((crop) => (\n                        <SelectItem key={crop.value} value={crop.value}>\n                          {crop.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"irrigation-method\">Irrigation Method</Label>\n                  <Select value={formData.irrigationMethod} onValueChange={(value) => handleInputChange(\"irrigationMethod\", value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {irrigationMethods.map((method) => (\n                        <SelectItem key={method.value} value={method.value}>\n                          {method.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"rainfall\">Last Rainfall (mm)</Label>\n                  <Input\n                    id=\"rainfall\"\n                    type=\"number\"\n                    placeholder=\"25\"\n                    value={formData.rainfall}\n                    onChange={(e) => handleInputChange(\"rainfall\", e.target.value)}\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"field-size\">Field Size (acres)</Label>\n                  <Input\n                    id=\"field-size\"\n                    type=\"number\"\n                    placeholder=\"10\"\n                    value={formData.fieldSize}\n                    onChange={(e) => handleInputChange(\"fieldSize\", e.target.value)}\n                    className=\"focus:ring-soma-green focus:border-soma-green\"\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full bg-blue-500 hover:bg-blue-600\">\n                  Calculate Water Needs\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Results Panel */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Water Optimization Results</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {results ? (\n                <div className=\"space-y-6\">\n                  {/* Water Usage */}\n                  <div className=\"text-center\">\n                    <div className=\"inline-flex items-center justify-center w-24 h-24 rounded-full bg-blue-100 mb-4\">\n                      <span className=\"text-xl font-bold text-blue-500\">\n                        {results.totalUsage.toLocaleString()}\n                      </span>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Estimated Water Usage</h3>\n                    <p className=\"text-blue-600 font-medium\">Gallons per week</p>\n                  </div>\n\n                  {/* Efficiency Score */}\n                  <div className=\"border-t pt-6\">\n                    <div className=\"flex justify-between items-center mb-3\">\n                      <h4 className=\"font-semibold text-gray-900\">💧 Efficiency Score</h4>\n                      <span className={`text-2xl font-bold ${getEfficiencyColor(results.efficiency)}`}>\n                        {results.efficiency}%\n                      </span>\n                    </div>\n                    <Progress \n                      value={results.efficiency} \n                      className=\"h-3\"\n                    />\n                  </div>\n\n                  {/* AI Tips */}\n                  <div className=\"border-t pt-6\">\n                    <h4 className=\"font-semibold text-gray-900 mb-3\">🤖 AI Water-Saving Tips</h4>\n                    <ul className=\"space-y-2 text-sm text-gray-600\">\n                      {results.tips.map((tip, index) => (\n                        <li key={index} className=\"flex items-start\">\n                          <span className=\"text-blue-500 mr-2\">•</span>\n                          {tip}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {/* Weekly Schedule */}\n                  <div className=\"border-t pt-6\">\n                    <h4 className=\"font-semibold text-gray-900 mb-3 flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4\" />\n                      Recommended Schedule\n                    </h4>\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      {results.weeklySchedule.map((schedule, index) => (\n                        <div key={index} className=\"bg-blue-50 p-2 rounded\">\n                          <span className=\"font-medium\">{schedule.day}:</span> {schedule.amount} gal\n                        </div>\n                      ))}\n                      <div className=\"bg-gray-50 p-2 rounded col-span-2\">\n                        <span className=\"font-medium\">Other days:</span> Monitor only\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <Droplets className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                  <p>Fill out the irrigation planning form to see recommendations</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WaterUsage;\n","size_bytes":8483},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/NasaMedia.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, ExternalLink, Heart, Info } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface NasaApodData {\n  date: string;\n  explanation: string;\n  hdurl?: string;\n  media_type: \"image\" | \"video\";\n  service_version: string;\n  title: string;\n  url: string;\n}\n\nconst NasaMedia = () => {\n  const [apodData, setApodData] = useState<NasaApodData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const fetchApodData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const apiKey = import.meta.env.VITE_NASA_API_KEY || \"DEMO_KEY\";\n        const response = await fetch(\n          `https://api.nasa.gov/planetary/apod?api_key=${apiKey}`\n        );\n\n        if (!response.ok) {\n          throw new Error(`NASA API Error: ${response.status}`);\n        }\n\n        const data: NasaApodData = await response.json();\n        setApodData(data);\n      } catch (err) {\n        console.error(\"Error fetching NASA APOD data:\", err);\n        setError(\n          err instanceof Error ? err.message : \"Failed to fetch NASA data\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchApodData();\n  }, []);\n\n  const handleSaveAsFavorite = () => {\n    setIsFavorite(!isFavorite);\n    toast({\n      title: isFavorite ? \"Removed from favorites\" : \"Added to favorites\",\n      description: isFavorite\n        ? \"Removed from your saved NASA images\"\n        : \"Saved to your NASA favorites collection\",\n    });\n  };\n\n  const handleViewOnNasa = () => {\n    window.open(\"https://apod.nasa.gov/apod/\", \"_blank\");\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-soma-grey py-8\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-center h-96\">\n            <div className=\"text-center\">\n              <Loader2 className=\"w-12 h-12 text-soma-green animate-spin mx-auto mb-4\" />\n              <p className=\"text-gray-600\">Loading NASA's featured content...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-soma-grey py-8\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"bg-red-50 border-red-200\">\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-xl font-bold text-red-800 mb-2\">\n                Unable to load NASA content\n              </h2>\n              <p className=\"text-red-600 mb-4\">{error}</p>\n              <Button\n                onClick={() => window.location.reload()}\n                className=\"bg-red-600 hover:bg-red-700 text-white\"\n              >\n                Try Again\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!apodData) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-black py-8\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold text-white mb-2\">\n            NASA Featured Insight\n          </h1>\n          <div className=\"flex items-center justify-center space-x-2 text-blue-200\">\n            <Info className=\"w-4 h-4\" />\n            <p className=\"text-sm\">\n              Daily content from NASA's public science feed\n            </p>\n          </div>\n        </div>\n\n        {/* Main Content Card */}\n        <Card className=\"bg-black/40 border-gray-700 backdrop-blur-sm shadow-2xl\">\n          <CardHeader className=\"text-center pb-6\">\n            <CardTitle className=\"text-3xl font-bold text-white mb-2\">\n              {apodData.title}\n            </CardTitle>\n            <p className=\"text-blue-200 text-lg\">\n              {formatDate(apodData.date)}\n            </p>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {/* Media Content */}\n            <div className=\"relative\">\n              {apodData.media_type === \"image\" ? (\n                <div className=\"relative overflow-hidden rounded-lg\">\n                  <img\n                    src={apodData.hdurl || apodData.url}\n                    alt={apodData.title}\n                    className=\"w-full h-auto max-h-[600px] object-cover rounded-lg shadow-2xl\"\n                    loading=\"lazy\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent rounded-lg\" />\n                </div>\n              ) : (\n                <div className=\"relative aspect-video rounded-lg overflow-hidden\">\n                  <iframe\n                    src={apodData.url}\n                    title={apodData.title}\n                    className=\"w-full h-full rounded-lg\"\n                    allowFullScreen\n                    frameBorder=\"0\"\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Description */}\n            <div className=\"bg-gray-900/50 rounded-lg p-6 backdrop-blur-sm\">\n              <h3 className=\"text-xl font-semibold text-white mb-4\">\n                About Today's Feature\n              </h3>\n              <p className=\"text-gray-200 leading-relaxed text-base\">\n                {apodData.explanation}\n              </p>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <Button\n                onClick={handleSaveAsFavorite}\n                variant={isFavorite ? \"default\" : \"outline\"}\n                className={`${\n                  isFavorite\n                    ? \"bg-soma-green hover:bg-green-600 text-white\"\n                    : \"border-gray-600 text-white hover:bg-gray-800\"\n                }`}\n              >\n                <Heart\n                  className={`w-4 h-4 mr-2 ${\n                    isFavorite ? \"fill-current\" : \"\"\n                  }`}\n                />\n                {isFavorite ? \"Favorited\" : \"Save as Favorite\"}\n              </Button>\n\n              <Button\n                onClick={handleViewOnNasa}\n                variant=\"outline\"\n                className=\"border-blue-500 text-blue-300 hover:bg-blue-900/50\"\n              >\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                View on NASA\n              </Button>\n            </div>\n\n            {/* Footer */}\n            <div className=\"text-center pt-4 border-t border-gray-700\">\n              <p className=\"text-gray-400 text-sm\">\n                Data provided by NASA's Astronomy Picture of the Day API\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default NasaMedia;","size_bytes":7328},"client/src/pages/SustainabilityDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LocationSearch } from \"@/components/LocationSearch\";\nimport { \n  Loader2, \n  Navigation, \n  MapPin, \n  Leaf, \n  Thermometer, \n  Droplets, \n  Wind, \n  Eye, \n  MessageCircle,\n  Cloud,\n  Sun,\n  AlertTriangle,\n  CheckCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LocationData {\n  latitude: number;\n  longitude: number;\n  locationName?: string;\n}\n\ninterface EarthData {\n  ndvi: number;\n  landSurfaceTemperature: number;\n  evapotranspiration: number;\n  vegetationStatus: string;\n  temperatureStatus: string;\n  droughtRisk: string;\n}\n\ninterface WeatherData {\n  current: {\n    temperature: number;\n    temperatureUnit: string;\n    conditions: string;\n    windSpeed: string;\n    windDirection: string;\n  };\n  forecast: Array<{\n    name: string;\n    temperature: number;\n    temperatureUnit: string;\n    conditions: string;\n    isDaytime: boolean;\n  }>;\n}\n\ninterface AirQualityData {\n  aqi: number;\n  status: string;\n  level: string;\n  mainPollutant: string;\n  location: string;\n}\n\nconst SustainabilityDashboard = () => {\n  const [location, setLocation] = useState<LocationData>({ latitude: 0, longitude: 0 });\n  const [locationInput, setLocationInput] = useState({ lat: \"\", lon: \"\", name: \"\" });\n  const [loading, setLoading] = useState(false);\n  const [geoLoading, setGeoLoading] = useState(false);\n  const [earthData, setEarthData] = useState<EarthData | null>(null);\n  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);\n  const [airQualityData, setAirQualityData] = useState<AirQualityData | null>(null);\n  const [showChat, setShowChat] = useState(false);\n  const { toast } = useToast();\n\n  const presetLocations = [\n    { name: \"Iowa Corn Belt\", lat: 42.0308, lon: -93.6319 },\n    { name: \"California Central Valley\", lat: 36.7783, lon: -119.4179 },\n    { name: \"Nebraska Farmland\", lat: 41.4925, lon: -99.9018 },\n    { name: \"Kansas Wheat Fields\", lat: 38.5267, lon: -96.7265 },\n    { name: \"Texas Panhandle\", lat: 35.2211, lon: -101.8313 },\n  ];\n\n  const getCurrentLocation = () => {\n    setGeoLoading(true);\n    \n    if (!navigator.geolocation) {\n      toast({\n        title: \"Geolocation not supported\",\n        description: \"Your browser doesn't support geolocation\",\n        variant: \"destructive\",\n      });\n      setGeoLoading(false);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        \n        setLocation({ latitude: lat, longitude: lon, locationName: \"Current Location\" });\n        setLocationInput({ lat: lat.toString(), lon: lon.toString(), name: \"Current Location\" });\n        \n        toast({\n          title: \"Location detected\",\n          description: `Loading environmental data for your location`,\n        });\n        \n        setGeoLoading(false);\n        await loadAllData(lat, lon);\n      },\n      (error) => {\n        console.error(\"Geolocation error:\", error);\n        toast({\n          title: \"Location access denied\",\n          description: \"Please enter coordinates manually or select a preset location\",\n          variant: \"destructive\",\n        });\n        setGeoLoading(false);\n      },\n      { enableHighAccuracy: true, timeout: 10000, maximumAge: 300000 }\n    );\n  };\n\n  const handleManualLocation = async () => {\n    if (!locationInput.lat || !locationInput.lon) {\n      toast({\n        title: \"Missing coordinates\",\n        description: \"Please enter both latitude and longitude\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const lat = parseFloat(locationInput.lat);\n    const lon = parseFloat(locationInput.lon);\n    \n    if (isNaN(lat) || isNaN(lon)) {\n      toast({\n        title: \"Invalid coordinates\",\n        description: \"Please enter valid numeric coordinates\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLocation({ latitude: lat, longitude: lon, locationName: locationInput.name || \"Custom Location\" });\n    await loadAllData(lat, lon);\n  };\n\n  const handlePresetLocation = async (preset: { lat: number; lon: number; name: string }) => {\n    setLocation({ latitude: preset.lat, longitude: preset.lon, locationName: preset.name });\n    setLocationInput({ lat: preset.lat.toString(), lon: preset.lon.toString(), name: preset.name });\n    await loadAllData(preset.lat, preset.lon);\n  };\n\n  const loadAllData = async (lat: number, lon: number) => {\n    setLoading(true);\n    \n    try {\n      // Load all environmental data in parallel\n      const [earthResponse, weatherResponse, airQualityResponse] = await Promise.allSettled([\n        fetch(`/api/nasa/earthdata?lat=${lat}&lon=${lon}`),\n        fetch(`/api/weather?lat=${lat}&lon=${lon}`),\n        fetch(`/api/air-quality?lat=${lat}&lon=${lon}`)\n      ]);\n\n      // Process Earth Data\n      if (earthResponse.status === 'fulfilled' && earthResponse.value.ok) {\n        const earthResult = await earthResponse.value.json();\n        setEarthData(earthResult);\n      }\n\n      // Process Weather Data\n      if (weatherResponse.status === 'fulfilled' && weatherResponse.value.ok) {\n        const weatherResult = await weatherResponse.value.json();\n        setWeatherData(weatherResult);\n      }\n\n      // Process Air Quality Data\n      if (airQualityResponse.status === 'fulfilled' && airQualityResponse.value.ok) {\n        const airQualityResult = await airQualityResponse.value.json();\n        setAirQualityData(airQualityResult);\n      }\n\n      toast({\n        title: \"Dashboard updated\",\n        description: \"Environmental data loaded successfully\",\n      });\n\n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n      toast({\n        title: \"Data loading error\",\n        description: \"Some environmental data may be unavailable\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setLoading(false);\n  };\n\n  const getStatusColor = (status: string) => {\n    const statusLower = status.toLowerCase();\n    if (statusLower.includes('excellent') || statusLower.includes('good')) return 'bg-green-100 text-green-800';\n    if (statusLower.includes('moderate')) return 'bg-yellow-100 text-yellow-800';\n    if (statusLower.includes('poor') || statusLower.includes('high')) return 'bg-red-100 text-red-800';\n    return 'bg-gray-100 text-gray-800';\n  };\n\n  const getAQIColor = (level: string) => {\n    switch (level) {\n      case \"good\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"moderate\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"unhealthy-sensitive\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"unhealthy\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getAIInsights = () => {\n    if (!earthData && !weatherData && !airQualityData) return [];\n\n    const insights = [];\n    \n    if (earthData) {\n      if (earthData.vegetationStatus === 'Poor' || earthData.vegetationStatus === 'Very Poor') {\n        insights.push(\"Your vegetation index is low. Consider applying organic fertilizer or adjusting irrigation.\");\n      }\n      if (earthData.droughtRisk === 'High') {\n        insights.push(\"High drought risk detected. Increase irrigation frequency and monitor soil moisture.\");\n      }\n      if (earthData.landSurfaceTemperature > 35) {\n        insights.push(\"Surface temperature is very high. Schedule irrigation for early morning or evening.\");\n      }\n    }\n\n    if (airQualityData && airQualityData.level !== 'good') {\n      insights.push(\"Air quality is not optimal. Consider limiting outdoor work during peak pollution hours.\");\n    }\n\n    if (weatherData && weatherData.current.conditions.toLowerCase().includes('rain')) {\n      insights.push(\"Rain expected. Adjust irrigation schedule and protect sensitive crops.\");\n    }\n\n    if (insights.length === 0) {\n      insights.push(\"Conditions look favorable for farming operations. Continue monitoring environmental factors.\");\n    }\n\n    return insights;\n  };\n\n  // Load default location on component mount\n  useEffect(() => {\n    // Default to Iowa Corn Belt if no location is set\n    if (location.latitude === 0 && location.longitude === 0) {\n      handlePresetLocation(presetLocations[0]);\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 fade-in\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900\">Sustainability Dashboard</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Real-time environmental insights for {location.locationName || 'your farm'}\n          </p>\n        </div>\n\n        {/* Location Input */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <MapPin className=\"w-5 h-5 text-green-600\" />\n              <span>Farm Location</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Button\n                onClick={getCurrentLocation}\n                disabled={geoLoading || loading}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {geoLoading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Detecting...\n                  </>\n                ) : (\n                  <>\n                    <Navigation className=\"w-4 h-4 mr-2\" />\n                    Use My Location\n                  </>\n                )}\n              </Button>\n\n              <div className=\"flex space-x-2\">\n                <Input\n                  type=\"number\"\n                  placeholder=\"Latitude\"\n                  value={locationInput.lat}\n                  onChange={(e) => setLocationInput(prev => ({ ...prev, lat: e.target.value }))}\n                  className=\"flex-1\"\n                />\n                <Input\n                  type=\"number\"\n                  placeholder=\"Longitude\"\n                  value={locationInput.lon}\n                  onChange={(e) => setLocationInput(prev => ({ ...prev, lon: e.target.value }))}\n                  className=\"flex-1\"\n                />\n                <Button onClick={handleManualLocation} variant=\"outline\" disabled={loading}>\n                  Load\n                </Button>\n              </div>\n\n              <div className=\"md:col-span-2 flex flex-wrap gap-2\">\n                {presetLocations.map((preset, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePresetLocation(preset)}\n                    disabled={loading}\n                    className=\"text-xs\"\n                  >\n                    {preset.name}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column - Environmental Data */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Environmental Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Leaf className=\"w-5 h-5 text-green-600\" />\n                  <span>Environmental Summary</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loading ? (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <Loader2 className=\"w-8 h-8 animate-spin text-green-600\" />\n                    <span className=\"ml-2 text-gray-600\">Loading environmental data...</span>\n                  </div>\n                ) : earthData ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-900\">{earthData.ndvi.toFixed(3)}</div>\n                      <div className=\"text-sm text-gray-600\">Vegetation Index (NDVI)</div>\n                      <Badge className={getStatusColor(earthData.vegetationStatus)}>{earthData.vegetationStatus}</Badge>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-900\">{earthData.landSurfaceTemperature}°C</div>\n                      <div className=\"text-sm text-gray-600\">Surface Temperature</div>\n                      <Badge className={getStatusColor(earthData.temperatureStatus)}>{earthData.temperatureStatus}</Badge>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-900\">{earthData.evapotranspiration} mm/day</div>\n                      <div className=\"text-sm text-gray-600\">Evapotranspiration</div>\n                      <Badge className={getStatusColor(earthData.droughtRisk)}>{earthData.droughtRisk} Drought Risk</Badge>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    Select a location to view environmental data\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Weather Forecast */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Cloud className=\"w-5 h-5 text-blue-600\" />\n                  <span>3-Day Weather Forecast</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {weatherData ? (\n                  <div className=\"space-y-4\">\n                    {/* Current Weather */}\n                    <div className=\"flex items-center space-x-4 p-4 bg-blue-50 rounded-lg\">\n                      <Sun className=\"w-8 h-8 text-yellow-500\" />\n                      <div>\n                        <div className=\"text-xl font-bold\">\n                          {weatherData.current.temperature}°{weatherData.current.temperatureUnit}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">{weatherData.current.conditions}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          Wind: {weatherData.current.windSpeed} {weatherData.current.windDirection}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* 3-Day Forecast */}\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      {weatherData.forecast.slice(0, 3).map((period, index) => (\n                        <div key={index} className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"text-sm font-medium text-gray-900\">{period.name}</div>\n                          <div className=\"my-2\">\n                            {period.isDaytime ? \n                              <Sun className=\"w-6 h-6 text-yellow-500 mx-auto\" /> : \n                              <Cloud className=\"w-6 h-6 text-gray-600 mx-auto\" />\n                            }\n                          </div>\n                          <div className=\"text-lg font-bold\">{period.temperature}°{period.temperatureUnit}</div>\n                          <div className=\"text-xs text-gray-600\">{period.conditions}</div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    Weather data will appear here\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Air Quality & AI */}\n          <div className=\"space-y-6\">\n            {/* Air Quality Index */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Wind className=\"w-5 h-5 text-purple-600\" />\n                  <span>Air Quality Index</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {airQualityData ? (\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"text-3xl font-bold text-gray-900\">{airQualityData.aqi}</div>\n                    <div className={`inline-block px-3 py-1 rounded-full text-sm font-medium border ${getAQIColor(airQualityData.level)}`}>\n                      {airQualityData.status}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      Main pollutant: {airQualityData.mainPollutant}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      {airQualityData.location}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    Air quality data will appear here\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* AI Suggestions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageCircle className=\"w-5 h-5 text-green-600\" />\n                  <span>Smart Suggestions</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {getAIInsights().map((insight, index) => (\n                    <div key={index} className=\"flex items-start space-x-2 p-3 bg-green-50 rounded-lg\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <div className=\"text-sm text-green-800\">{insight}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Assistant Chat */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <MessageCircle className=\"w-5 h-5 text-blue-600\" />\n                    <span>AI Assistant</span>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setShowChat(!showChat)}\n                    variant=\"outline\"\n                  >\n                    {showChat ? 'Close' : 'Open Chat'}\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              {showChat && (\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"text-sm text-center text-gray-600 mb-4\">\n                      Ask me anything about sustainable farming practices!\n                    </div>\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {[\"How to improve soil health?\", \"Water management tips?\", \"Best cover crops?\", \"Pest control strategies?\"].map((suggestion, index) => (\n                        <Button\n                          key={index}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={async () => {\n                            try {\n                              const response = await fetch('/api/ai/chat', {\n                                method: 'POST',\n                                headers: { 'Content-Type': 'application/json' },\n                                body: JSON.stringify({ question: suggestion })\n                              });\n                              const data = await response.json();\n                              toast({\n                                title: \"AI Recommendation\",\n                                description: data.response.substring(0, 100) + \"...\",\n                              });\n                            } catch (error) {\n                              toast({\n                                title: \"AI Assistant\",\n                                description: \"Visit the AI Assistant page for full chat functionality\",\n                                variant: \"default\",\n                              });\n                            }\n                          }}\n                          className=\"text-xs\"\n                        >\n                          {suggestion}\n                        </Button>\n                      ))}\n                    </div>\n                    <div className=\"text-center\">\n                      <Button\n                        onClick={() => window.location.href = '/ai-assistant'}\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                        size=\"sm\"\n                      >\n                        Open Full AI Chat\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              )}\n            </Card>\n          </div>\n        </div>\n\n        {/* Data Sources Footer */}\n        <div className=\"mt-8 text-center text-sm text-gray-500\">\n          Environmental data from NASA MODIS/VIIRS, Weather from National Weather Service, Air Quality from AQICN\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SustainabilityDashboard;","size_bytes":22034},"client/src/components/LocationSearch.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Search } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface LocationSearchProps {\n  onLocationSelect: (lat: number, lon: number, locationName: string) => void;\n  placeholder?: string;\n  className?: string;\n}\n\ninterface LocationSuggestion {\n  name: string;\n  country: string;\n  state?: string;\n  lat: number;\n  lon: number;\n  display_name: string;\n}\n\nexport const LocationSearch = ({ \n  onLocationSelect, \n  placeholder = \"Search for a location...\",\n  className = \"\"\n}: LocationSearchProps) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<LocationSuggestion[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Popular farm locations for quick access\n  const popularLocations: LocationSuggestion[] = [\n    { name: \"Ames, Iowa\", country: \"USA\", state: \"Iowa\", lat: 42.0308, lon: -93.6319, display_name: \"Ames, Iowa, USA\" },\n    { name: \"Lubbock, Texas\", country: \"USA\", state: \"Texas\", lat: 35.2211, lon: -101.8313, display_name: \"Lubbock, Texas, USA\" },\n    { name: \"Lincoln, Nebraska\", country: \"USA\", state: \"Nebraska\", lat: 40.8136, lon: -96.7026, display_name: \"Lincoln, Nebraska, USA\" },\n    { name: \"Manhattan, Kansas\", country: \"USA\", state: \"Kansas\", lat: 39.1836, lon: -96.5717, display_name: \"Manhattan, Kansas, USA\" },\n    { name: \"Champaign, Illinois\", country: \"USA\", state: \"Illinois\", lat: 40.1164, lon: -88.2434, display_name: \"Champaign, Illinois, USA\" },\n  ];\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setShowSuggestions(false);\n        setSelectedIndex(-1);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  useEffect(() => {\n    if (searchTerm.length < 2) {\n      setSuggestions(searchTerm.length === 0 ? popularLocations : []);\n      setShowSuggestions(searchTerm.length === 0);\n      return;\n    }\n\n    const debounceTimer = setTimeout(async () => {\n      setIsLoading(true);\n      try {\n        // Using Nominatim (OpenStreetMap) geocoding service - free and reliable\n        const response = await fetch(\n          `https://nominatim.openstreetmap.org/search?format=json&limit=8&q=${encodeURIComponent(searchTerm)}&countrycodes=us,ca&addressdetails=1`\n        );\n        \n        if (response.ok) {\n          const data = await response.json();\n          const formattedSuggestions: LocationSuggestion[] = data.map((item: any) => ({\n            name: item.address?.city || item.address?.town || item.address?.village || item.display_name.split(',')[0],\n            country: item.address?.country || 'Unknown',\n            state: item.address?.state,\n            lat: parseFloat(item.lat),\n            lon: parseFloat(item.lon),\n            display_name: item.display_name\n          }));\n          \n          setSuggestions(formattedSuggestions);\n          setShowSuggestions(true);\n          setSelectedIndex(-1);\n        }\n      } catch (error) {\n        console.error('Error fetching location suggestions:', error);\n        // Fallback to popular locations on error\n        setSuggestions(popularLocations.filter(loc => \n          loc.name.toLowerCase().includes(searchTerm.toLowerCase())\n        ));\n        setShowSuggestions(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }, 300);\n\n    return () => clearTimeout(debounceTimer);\n  }, [searchTerm]);\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!showSuggestions || suggestions.length === 0) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => \n          prev < suggestions.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : -1);\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (selectedIndex >= 0 && selectedIndex < suggestions.length) {\n          handleLocationSelect(suggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        setSelectedIndex(-1);\n        inputRef.current?.blur();\n        break;\n    }\n  };\n\n  const handleLocationSelect = (location: LocationSuggestion) => {\n    setSearchTerm(location.display_name.split(',').slice(0, 2).join(', '));\n    setShowSuggestions(false);\n    setSelectedIndex(-1);\n    onLocationSelect(location.lat, location.lon, location.display_name);\n  };\n\n  const handleCurrentLocation = () => {\n    if (navigator.geolocation) {\n      setIsLoading(true);\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          \n          try {\n            // Reverse geocoding to get location name\n            const response = await fetch(\n              `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`\n            );\n            \n            if (response.ok) {\n              const data = await response.json();\n              const locationName = data.display_name || `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`;\n              setSearchTerm(locationName.split(',').slice(0, 2).join(', '));\n              onLocationSelect(latitude, longitude, locationName);\n            }\n          } catch (error) {\n            console.error('Error getting location name:', error);\n            const locationName = `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`;\n            setSearchTerm(locationName);\n            onLocationSelect(latitude, longitude, locationName);\n          } finally {\n            setIsLoading(false);\n          }\n        },\n        (error) => {\n          console.error('Error getting current location:', error);\n          setIsLoading(false);\n        }\n      );\n    }\n  };\n\n  return (\n    <div ref={searchRef} className={`relative ${className}`}>\n      <div className=\"flex space-x-2\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <Input\n            ref={inputRef}\n            type=\"text\"\n            value={searchTerm}\n            onChange={(e) => {\n              setSearchTerm(e.target.value);\n              setShowSuggestions(true);\n            }}\n            onFocus={() => {\n              if (searchTerm.length === 0) {\n                setSuggestions(popularLocations);\n                setShowSuggestions(true);\n              } else if (suggestions.length > 0) {\n                setShowSuggestions(true);\n              }\n            }}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            className=\"pl-10 pr-4\"\n            disabled={isLoading}\n          />\n          {isLoading && (\n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n              <div className=\"w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n            </div>\n          )}\n        </div>\n        \n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleCurrentLocation}\n          disabled={isLoading}\n          className=\"px-3\"\n        >\n          <MapPin className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      {/* Suggestions Dropdown */}\n      {showSuggestions && suggestions.length > 0 && (\n        <Card className=\"absolute z-50 w-full mt-1 p-0 shadow-lg border\">\n          <div className=\"max-h-64 overflow-y-auto\">\n            {searchTerm.length === 0 && (\n              <div className=\"px-4 py-2 text-sm text-gray-500 font-medium border-b\">\n                Popular Farm Locations\n              </div>\n            )}\n            {suggestions.map((suggestion, index) => (\n              <div\n                key={`${suggestion.lat}-${suggestion.lon}-${index}`}\n                className={`px-4 py-3 cursor-pointer border-b last:border-b-0 ${\n                  index === selectedIndex\n                    ? 'bg-blue-50 text-blue-700'\n                    : 'hover:bg-gray-50'\n                }`}\n                onClick={() => handleLocationSelect(suggestion)}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"w-4 h-4 text-gray-400 flex-shrink-0\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium text-sm truncate\">\n                      {suggestion.name}\n                      {suggestion.state && `, ${suggestion.state}`}\n                    </div>\n                    <div className=\"text-xs text-gray-500 truncate\">\n                      {suggestion.display_name}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};","size_bytes":9393}}}